
littetryFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800419c  0800419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004290  08004290  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004290  08004290  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004290  08004290  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000024  080042bc  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080042bc  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c98  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002220  00000000  00000000  00030ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00032f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00033cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e44  00000000  00000000  000349e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010dd0  00000000  00000000  0004a824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d49c  00000000  00000000  0005b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8a90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031e8  00000000  00000000  000e8ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000024 	.word	0x20000024
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004184 	.word	0x08004184

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000028 	.word	0x20000028
 80000fc:	08004184 	.word	0x08004184

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	; 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	; 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000400:	f000 fb58 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000404:	f000 f834 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000408:	f000 f94a 	bl	80006a0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800040c:	f000 f878 	bl	8000500 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000410:	f000 f8f6 	bl	8000600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA,LED_B_Pin,GPIO_PIN_SET);
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	0059      	lsls	r1, r3, #1
 8000418:	23a0      	movs	r3, #160	; 0xa0
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	2201      	movs	r2, #1
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fedc 	bl	80011dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,LED_Y_Pin,GPIO_PIN_RESET);
 8000424:	2380      	movs	r3, #128	; 0x80
 8000426:	021b      	lsls	r3, r3, #8
 8000428:	480e      	ldr	r0, [pc, #56]	; (8000464 <main+0x68>)
 800042a:	2200      	movs	r2, #0
 800042c:	0019      	movs	r1, r3
 800042e:	f000 fed5 	bl	80011dc <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg), 1000); */
	  HAL_UART_Receive(&huart1,num,2, HAL_MAX_DELAY);
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <main+0x6c>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	0019      	movs	r1, r3
 8000438:	2301      	movs	r3, #1
 800043a:	425b      	negs	r3, r3
 800043c:	480b      	ldr	r0, [pc, #44]	; (800046c <main+0x70>)
 800043e:	2202      	movs	r2, #2
 8000440:	f002 fd06 	bl	8002e50 <HAL_UART_Receive>
	  /* HAL_UART_Receive(&huart1,receiveData,strlen(receiveData), HAL_MADELAY); */
/* //	  HAL_Delay(100); */
	  HAL_UART_Transmit(&huart1,num, 1,1000);
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <main+0x6c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	0019      	movs	r1, r3
 800044a:	23fa      	movs	r3, #250	; 0xfa
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4807      	ldr	r0, [pc, #28]	; (800046c <main+0x70>)
 8000450:	2201      	movs	r2, #1
 8000452:	f002 fc61 	bl	8002d18 <HAL_UART_Transmit>

    Ctr_Led(num);
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <main+0x6c>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	0018      	movs	r0, r3
 800045c:	f000 f98e 	bl	800077c <Ctr_Led>
	  HAL_UART_Receive(&huart1,num,2, HAL_MAX_DELAY);
 8000460:	e7e7      	b.n	8000432 <main+0x36>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	50000400 	.word	0x50000400
 8000468:	20000120 	.word	0x20000120
 800046c:	2000008c 	.word	0x2000008c

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b590      	push	{r4, r7, lr}
 8000472:	b093      	sub	sp, #76	; 0x4c
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	2414      	movs	r4, #20
 8000478:	193b      	adds	r3, r7, r4
 800047a:	0018      	movs	r0, r3
 800047c:	2334      	movs	r3, #52	; 0x34
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f003 fe77 	bl	8004174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	0018      	movs	r0, r3
 800048a:	2310      	movs	r3, #16
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f003 fe70 	bl	8004174 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	0018      	movs	r0, r3
 800049a:	f000 febd 	bl	8001218 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2202      	movs	r2, #2
 80004a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	2280      	movs	r2, #128	; 0x80
 80004a8:	0052      	lsls	r2, r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2240      	movs	r2, #64	; 0x40
 80004b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fef5 	bl	80012b0 <HAL_RCC_OscConfig>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004ca:	f000 f9b1 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2207      	movs	r2, #7
 80004d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2100      	movs	r1, #0
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 f9f0 	bl	80018d0 <HAL_RCC_ClockConfig>
 80004f0:	1e03      	subs	r3, r0, #0
 80004f2:	d001      	beq.n	80004f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80004f4:	f000 f99c 	bl	8000830 <Error_Handler>
  }
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b013      	add	sp, #76	; 0x4c
 80004fe:	bd90      	pop	{r4, r7, pc}

08000500 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08e      	sub	sp, #56	; 0x38
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	2328      	movs	r3, #40	; 0x28
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2310      	movs	r3, #16
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f003 fe2f 	bl	8004174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000516:	231c      	movs	r3, #28
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	0018      	movs	r0, r3
 800051c:	230c      	movs	r3, #12
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f003 fe27 	bl	8004174 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	231c      	movs	r3, #28
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f003 fe20 	bl	8004174 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000534:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <MX_TIM3_Init+0xf4>)
 8000536:	4a30      	ldr	r2, [pc, #192]	; (80005f8 <MX_TIM3_Init+0xf8>)
 8000538:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800053a:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <MX_TIM3_Init+0xf4>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <MX_TIM3_Init+0xf4>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <MX_TIM3_Init+0xf4>)
 8000548:	4a2c      	ldr	r2, [pc, #176]	; (80005fc <MX_TIM3_Init+0xfc>)
 800054a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <MX_TIM3_Init+0xf4>)
 800054e:	2200      	movs	r2, #0
 8000550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <MX_TIM3_Init+0xf4>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <MX_TIM3_Init+0xf4>)
 800055a:	0018      	movs	r0, r3
 800055c:	f001 fc96 	bl	8001e8c <HAL_TIM_Base_Init>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000564:	f000 f964 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000568:	2128      	movs	r1, #40	; 0x28
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	0152      	lsls	r2, r2, #5
 8000570:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000572:	187a      	adds	r2, r7, r1
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_TIM3_Init+0xf4>)
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fe3f 	bl	80021fc <HAL_TIM_ConfigClockSource>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000582:	f000 f955 	bl	8000830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_TIM3_Init+0xf4>)
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fcd7 	bl	8001f3c <HAL_TIM_PWM_Init>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000592:	f000 f94d 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000596:	211c      	movs	r1, #28
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005a4:	187a      	adds	r2, r7, r1
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_TIM3_Init+0xf4>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 fad2 	bl	8002b54 <HAL_TIMEx_MasterConfigSynchronization>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80005b4:	f000 f93c 	bl	8000830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2260      	movs	r2, #96	; 0x60
 80005bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80005be:	003b      	movs	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005d0:	0039      	movs	r1, r7
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_TIM3_Init+0xf4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	0018      	movs	r0, r3
 80005d8:	f001 fd10 	bl	8001ffc <HAL_TIM_PWM_ConfigChannel>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80005e0:	f000 f926 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <MX_TIM3_Init+0xf4>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 f96a 	bl	80008c0 <HAL_TIM_MspPostInit>

}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b00e      	add	sp, #56	; 0x38
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000040 	.word	0x20000040
 80005f8:	40000400 	.word	0x40000400
 80005fc:	0000ffff 	.word	0x0000ffff

08000600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000606:	4a25      	ldr	r2, [pc, #148]	; (800069c <MX_USART1_UART_Init+0x9c>)
 8000608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <MX_USART1_UART_Init+0x98>)
 800060c:	22e1      	movs	r2, #225	; 0xe1
 800060e:	0252      	lsls	r2, r2, #9
 8000610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_USART1_UART_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_USART1_UART_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000636:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_USART1_UART_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART1_UART_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f002 fae8 	bl	8002c24 <HAL_MultiProcessor_Init>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000658:	f000 f8ea 	bl	8000830 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART1_UART_Init+0x98>)
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f003 fc83 	bl	8003f6c <HAL_UARTEx_SetTxFifoThreshold>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 f8e1 	bl	8000830 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000670:	2100      	movs	r1, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f003 fcba 	bl	8003fec <HAL_UARTEx_SetRxFifoThreshold>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800067c:	f000 f8d8 	bl	8000830 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <MX_USART1_UART_Init+0x98>)
 8000682:	0018      	movs	r0, r3
 8000684:	f003 fc38 	bl	8003ef8 <HAL_UARTEx_DisableFifoMode>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800068c:	f000 f8d0 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	2000008c 	.word	0x2000008c
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	240c      	movs	r4, #12
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	2314      	movs	r3, #20
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f003 fd5f 	bl	8004174 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	4b2f      	ldr	r3, [pc, #188]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006bc:	2120      	movs	r1, #32
 80006be:	430a      	orrs	r2, r1
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
 80006c2:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c6:	2220      	movs	r2, #32
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b29      	ldr	r3, [pc, #164]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006d4:	2101      	movs	r1, #1
 80006d6:	430a      	orrs	r2, r1
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006de:	2201      	movs	r2, #1
 80006e0:	4013      	ands	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006ec:	2102      	movs	r1, #2
 80006ee:	430a      	orrs	r2, r1
 80006f0:	635a      	str	r2, [r3, #52]	; 0x34
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_GPIO_Init+0xd4>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f6:	2202      	movs	r2, #2
 80006f8:	4013      	ands	r3, r2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_Y_Pin, GPIO_PIN_RESET);
 80006fe:	23c0      	movs	r3, #192	; 0xc0
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	481d      	ldr	r0, [pc, #116]	; (8000778 <MX_GPIO_Init+0xd8>)
 8000704:	2200      	movs	r2, #0
 8000706:	0019      	movs	r1, r3
 8000708:	f000 fd68 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800070c:	2380      	movs	r3, #128	; 0x80
 800070e:	0059      	lsls	r1, r3, #1
 8000710:	23a0      	movs	r3, #160	; 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	2200      	movs	r2, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fd60 	bl	80011dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_Y_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_Y_Pin;
 800071c:	193b      	adds	r3, r7, r4
 800071e:	22c0      	movs	r2, #192	; 0xc0
 8000720:	0212      	lsls	r2, r2, #8
 8000722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2201      	movs	r2, #1
 8000728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	193b      	adds	r3, r7, r4
 8000738:	4a0f      	ldr	r2, [pc, #60]	; (8000778 <MX_GPIO_Init+0xd8>)
 800073a:	0019      	movs	r1, r3
 800073c:	0010      	movs	r0, r2
 800073e:	f000 fbe9 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000742:	0021      	movs	r1, r4
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	0052      	lsls	r2, r2, #1
 800074a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800075e:	187a      	adds	r2, r7, r1
 8000760:	23a0      	movs	r3, #160	; 0xa0
 8000762:	05db      	lsls	r3, r3, #23
 8000764:	0011      	movs	r1, r2
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fbd4 	bl	8000f14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b009      	add	sp, #36	; 0x24
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	40021000 	.word	0x40021000
 8000778:	50000400 	.word	0x50000400

0800077c <Ctr_Led>:

/* USER CODE BEGIN 4 */
void Ctr_Led(uint8_t data)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	0002      	movs	r2, r0
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	701a      	strb	r2, [r3, #0]
    switch (data) {
 8000788:	1dfb      	adds	r3, r7, #7
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b05      	cmp	r3, #5
 800078e:	d836      	bhi.n	80007fe <Ctr_Led+0x82>
 8000790:	009a      	lsls	r2, r3, #2
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <Ctr_Led+0xa4>)
 8000794:	18d3      	adds	r3, r2, r3
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	469f      	mov	pc, r3
        case 0:
            HAL_GPIO_WritePin(GPIOA, LED_B_Pin, GPIO_PIN_RESET);
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	0059      	lsls	r1, r3, #1
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	2200      	movs	r2, #0
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fd19 	bl	80011dc <HAL_GPIO_WritePin>
            break;
 80007aa:	e035      	b.n	8000818 <Ctr_Led+0x9c>
        case 1:
            HAL_GPIO_WritePin(GPIOA, LED_B_Pin, GPIO_PIN_SET);
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	0059      	lsls	r1, r3, #1
 80007b0:	23a0      	movs	r3, #160	; 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	2201      	movs	r2, #1
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fd10 	bl	80011dc <HAL_GPIO_WritePin>
            break;
 80007bc:	e02c      	b.n	8000818 <Ctr_Led+0x9c>
        case 2:
            HAL_GPIO_WritePin(GPIOB, LED_Y_Pin, GPIO_PIN_RESET);
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	021b      	lsls	r3, r3, #8
 80007c2:	4818      	ldr	r0, [pc, #96]	; (8000824 <Ctr_Led+0xa8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	0019      	movs	r1, r3
 80007c8:	f000 fd08 	bl	80011dc <HAL_GPIO_WritePin>
            break;
 80007cc:	e024      	b.n	8000818 <Ctr_Led+0x9c>
        case 3:
            HAL_GPIO_WritePin(GPIOB, LED_Y_Pin, GPIO_PIN_SET);
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	4814      	ldr	r0, [pc, #80]	; (8000824 <Ctr_Led+0xa8>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	0019      	movs	r1, r3
 80007d8:	f000 fd00 	bl	80011dc <HAL_GPIO_WritePin>
            break;
 80007dc:	e01c      	b.n	8000818 <Ctr_Led+0x9c>
        case 4:
            HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_RESET);
 80007de:	2380      	movs	r3, #128	; 0x80
 80007e0:	01db      	lsls	r3, r3, #7
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <Ctr_Led+0xa8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	0019      	movs	r1, r3
 80007e8:	f000 fcf8 	bl	80011dc <HAL_GPIO_WritePin>
            break;
 80007ec:	e014      	b.n	8000818 <Ctr_Led+0x9c>
        case 5:
            HAL_GPIO_WritePin(GPIOB, LED_G_Pin, GPIO_PIN_SET);
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	01db      	lsls	r3, r3, #7
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <Ctr_Led+0xa8>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	0019      	movs	r1, r3
 80007f8:	f000 fcf0 	bl	80011dc <HAL_GPIO_WritePin>
            break;
 80007fc:	e00c      	b.n	8000818 <Ctr_Led+0x9c>
        default:
            HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg), 1000);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <Ctr_Led+0xac>)
 8000800:	0018      	movs	r0, r3
 8000802:	f7ff fc7d 	bl	8000100 <strlen>
 8000806:	0003      	movs	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	23fa      	movs	r3, #250	; 0xfa
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4906      	ldr	r1, [pc, #24]	; (8000828 <Ctr_Led+0xac>)
 8000810:	4806      	ldr	r0, [pc, #24]	; (800082c <Ctr_Led+0xb0>)
 8000812:	f002 fa81 	bl	8002d18 <HAL_UART_Transmit>
            /* HAL_UART_Transmit(&huart1,num, 2,1000); */
            break;
 8000816:	46c0      	nop			; (mov r8, r8)
    }
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b002      	add	sp, #8
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800419c 	.word	0x0800419c
 8000824:	50000400 	.word	0x50000400
 8000828:	20000000 	.word	0x20000000
 800082c:	2000008c 	.word	0x2000008c

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	641a      	str	r2, [r3, #64]	; 0x40
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0549      	lsls	r1, r1, #21
 8000864:	430a      	orrs	r2, r1
 8000866:	63da      	str	r2, [r3, #60]	; 0x3c
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_MspInit+0x44>)
 800086a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	055b      	lsls	r3, r3, #21
 8000870:	4013      	ands	r3, r2
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b002      	add	sp, #8
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <HAL_TIM_Base_MspInit+0x34>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d10b      	bne.n	80008ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_TIM_Base_MspInit+0x38>)
 8000898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_TIM_Base_MspInit+0x38>)
 800089c:	2102      	movs	r1, #2
 800089e:	430a      	orrs	r2, r1
 80008a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_TIM_Base_MspInit+0x38>)
 80008a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008a6:	2202      	movs	r2, #2
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	40000400 	.word	0x40000400
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	240c      	movs	r4, #12
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	0018      	movs	r0, r3
 80008ce:	2314      	movs	r3, #20
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f003 fc4e 	bl	8004174 <memset>
  if(htim->Instance==TIM3)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_TIM_MspPostInit+0x70>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d122      	bne.n	8000928 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_TIM_MspPostInit+0x74>)
 80008e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <HAL_TIM_MspPostInit+0x74>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	430a      	orrs	r2, r1
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_TIM_MspPostInit+0x74>)
 80008f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f2:	2201      	movs	r2, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008fa:	0021      	movs	r1, r4
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2240      	movs	r2, #64	; 0x40
 8000900:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2202      	movs	r2, #2
 8000906:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2201      	movs	r2, #1
 8000918:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	187a      	adds	r2, r7, r1
 800091c:	23a0      	movs	r3, #160	; 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f000 faf6 	bl	8000f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b009      	add	sp, #36	; 0x24
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	40000400 	.word	0x40000400
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b091      	sub	sp, #68	; 0x44
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	232c      	movs	r3, #44	; 0x2c
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	0018      	movs	r0, r3
 8000946:	2314      	movs	r3, #20
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f003 fc12 	bl	8004174 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000950:	2410      	movs	r4, #16
 8000952:	193b      	adds	r3, r7, r4
 8000954:	0018      	movs	r0, r3
 8000956:	231c      	movs	r3, #28
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f003 fc0a 	bl	8004174 <memset>
  if(huart->Instance==USART1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <HAL_UART_MspInit+0xcc>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d147      	bne.n	80009fa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000976:	193b      	adds	r3, r7, r4
 8000978:	0018      	movs	r0, r3
 800097a:	f001 f953 	bl	8001c24 <HAL_RCCEx_PeriphCLKConfig>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000982:	f7ff ff55 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <HAL_UART_MspInit+0xd0>)
 8000988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <HAL_UART_MspInit+0xd0>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	01c9      	lsls	r1, r1, #7
 8000990:	430a      	orrs	r2, r1
 8000992:	641a      	str	r2, [r3, #64]	; 0x40
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <HAL_UART_MspInit+0xd0>)
 8000996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	01db      	lsls	r3, r3, #7
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_UART_MspInit+0xd0>)
 80009a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0xd0>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	635a      	str	r2, [r3, #52]	; 0x34
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_UART_MspInit+0xd0>)
 80009b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ba:	212c      	movs	r1, #44	; 0x2c
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	22c0      	movs	r2, #192	; 0xc0
 80009c0:	00d2      	lsls	r2, r2, #3
 80009c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2212      	movs	r2, #18
 80009c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2201      	movs	r2, #1
 80009ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2201      	movs	r2, #1
 80009da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fa95 	bl	8000f14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	201b      	movs	r0, #27
 80009f0:	f000 f992 	bl	8000d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009f4:	201b      	movs	r0, #27
 80009f6:	f000 f9a4 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b011      	add	sp, #68	; 0x44
 8000a00:	bd90      	pop	{r4, r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f8aa 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <USART1_IRQHandler+0x14>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 fae6 	bl	8003014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	2000008c 	.word	0x2000008c

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a64:	f7ff fff6 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a8e:	f003 fb4d 	bl	800412c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a92:	f7ff fcb3 	bl	80003fc <main>

08000a96 <LoopForever>:

LoopForever:
  b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   r0, =_estack
 8000a98:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000aa4:	08004298 	.word	0x08004298
  ldr r2, =_sbss
 8000aa8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000aac:	20000128 	.word	0x20000128

08000ab0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_Init+0x3c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_Init+0x3c>)
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0049      	lsls	r1, r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	2003      	movs	r0, #3
 8000ad0:	f000 f810 	bl	8000af4 <HAL_InitTick>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e001      	b.n	8000ae4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff feac 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	230f      	movs	r3, #15
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_InitTick+0x88>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d02b      	beq.n	8000b64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <HAL_InitTick+0x8c>)
 8000b0e:	681c      	ldr	r4, [r3, #0]
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <HAL_InitTick+0x88>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	0019      	movs	r1, r3
 8000b16:	23fa      	movs	r3, #250	; 0xfa
 8000b18:	0098      	lsls	r0, r3, #2
 8000b1a:	f7ff faf9 	bl	8000110 <__udivsi3>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	0019      	movs	r1, r3
 8000b22:	0020      	movs	r0, r4
 8000b24:	f7ff faf4 	bl	8000110 <__udivsi3>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f919 	bl	8000d62 <HAL_SYSTICK_Config>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d112      	bne.n	8000b5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d80a      	bhi.n	8000b50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	425b      	negs	r3, r3
 8000b40:	2200      	movs	r2, #0
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 f8e8 	bl	8000d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_InitTick+0x90>)
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e00d      	b.n	8000b6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b50:	230f      	movs	r3, #15
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	e008      	b.n	8000b6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e003      	b.n	8000b6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b64:	230f      	movs	r3, #15
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
}
 8000b72:	0018      	movs	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b005      	add	sp, #20
 8000b78:	bd90      	pop	{r4, r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	20000020 	.word	0x20000020
 8000b80:	20000018 	.word	0x20000018
 8000b84:	2000001c 	.word	0x2000001c

08000b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	001a      	movs	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	18d2      	adds	r2, r2, r3
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	20000020 	.word	0x20000020
 8000ba8:	20000124 	.word	0x20000124

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000124 	.word	0x20000124

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd2:	d809      	bhi.n	8000be8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	231f      	movs	r3, #31
 8000bdc:	401a      	ands	r2, r3
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_EnableIRQ+0x30>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	4091      	lsls	r1, r2
 8000be4:	000a      	movs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b7f      	cmp	r3, #127	; 0x7f
 8000c08:	d828      	bhi.n	8000c5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <__NVIC_SetPriority+0xd4>)
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	33c0      	adds	r3, #192	; 0xc0
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	589b      	ldr	r3, [r3, r2]
 8000c1a:	1dfa      	adds	r2, r7, #7
 8000c1c:	7812      	ldrb	r2, [r2, #0]
 8000c1e:	0011      	movs	r1, r2
 8000c20:	2203      	movs	r2, #3
 8000c22:	400a      	ands	r2, r1
 8000c24:	00d2      	lsls	r2, r2, #3
 8000c26:	21ff      	movs	r1, #255	; 0xff
 8000c28:	4091      	lsls	r1, r2
 8000c2a:	000a      	movs	r2, r1
 8000c2c:	43d2      	mvns	r2, r2
 8000c2e:	401a      	ands	r2, r3
 8000c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	401a      	ands	r2, r3
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2303      	movs	r3, #3
 8000c42:	4003      	ands	r3, r0
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c48:	481f      	ldr	r0, [pc, #124]	; (8000cc8 <__NVIC_SetPriority+0xd4>)
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	089b      	lsrs	r3, r3, #2
 8000c52:	430a      	orrs	r2, r1
 8000c54:	33c0      	adds	r3, #192	; 0xc0
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c5a:	e031      	b.n	8000cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <__NVIC_SetPriority+0xd8>)
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0019      	movs	r1, r3
 8000c64:	230f      	movs	r3, #15
 8000c66:	400b      	ands	r3, r1
 8000c68:	3b08      	subs	r3, #8
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3306      	adds	r3, #6
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	3304      	adds	r3, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	1dfa      	adds	r2, r7, #7
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	400a      	ands	r2, r1
 8000c80:	00d2      	lsls	r2, r2, #3
 8000c82:	21ff      	movs	r1, #255	; 0xff
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	43d2      	mvns	r2, r2
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	019b      	lsls	r3, r3, #6
 8000c92:	22ff      	movs	r2, #255	; 0xff
 8000c94:	401a      	ands	r2, r3
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	4003      	ands	r3, r0
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <__NVIC_SetPriority+0xd8>)
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	001c      	movs	r4, r3
 8000cac:	230f      	movs	r3, #15
 8000cae:	4023      	ands	r3, r4
 8000cb0:	3b08      	subs	r3, #8
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	3306      	adds	r3, #6
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	18c3      	adds	r3, r0, r3
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	601a      	str	r2, [r3, #0]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b003      	add	sp, #12
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	045b      	lsls	r3, r3, #17
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d301      	bcc.n	8000ce8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e010      	b.n	8000d0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <SysTick_Config+0x44>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	3a01      	subs	r2, #1
 8000cee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	425b      	negs	r3, r3
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff ff7c 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x44>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x44>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	210f      	movs	r1, #15
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	1c02      	adds	r2, r0, #0
 8000d28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	0002      	movs	r2, r0
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ff33 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffaf 	bl	8000cd0 <SysTick_Config>
 8000d72:	0003      	movs	r3, r0
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e050      	b.n	8000e30 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2225      	movs	r2, #37	; 0x25
 8000d92:	5c9b      	ldrb	r3, [r3, r2]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d008      	beq.n	8000dac <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2224      	movs	r2, #36	; 0x24
 8000da4:	2100      	movs	r1, #0
 8000da6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e041      	b.n	8000e30 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	210e      	movs	r1, #14
 8000db8:	438a      	bics	r2, r1
 8000dba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	491c      	ldr	r1, [pc, #112]	; (8000e38 <HAL_DMA_Abort+0xbc>)
 8000dc8:	400a      	ands	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	438a      	bics	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000ddc:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_DMA_Abort+0xc0>)
 8000dde:	6859      	ldr	r1, [r3, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	221c      	movs	r2, #28
 8000de6:	4013      	ands	r3, r2
 8000de8:	2201      	movs	r2, #1
 8000dea:	409a      	lsls	r2, r3
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <HAL_DMA_Abort+0xc0>)
 8000dee:	430a      	orrs	r2, r1
 8000df0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000dfa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d00c      	beq.n	8000e1e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e0e:	490a      	ldr	r1, [pc, #40]	; (8000e38 <HAL_DMA_Abort+0xbc>)
 8000e10:	400a      	ands	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e1c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2225      	movs	r2, #37	; 0x25
 8000e22:	2101      	movs	r1, #1
 8000e24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2224      	movs	r2, #36	; 0x24
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	0018      	movs	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b002      	add	sp, #8
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	fffffeff 	.word	0xfffffeff
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e48:	210f      	movs	r1, #15
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2225      	movs	r2, #37	; 0x25
 8000e54:	5c9b      	ldrb	r3, [r3, r2]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d006      	beq.n	8000e6a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2204      	movs	r2, #4
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e049      	b.n	8000efe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	210e      	movs	r1, #14
 8000e76:	438a      	bics	r2, r1
 8000e78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2101      	movs	r1, #1
 8000e86:	438a      	bics	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	491d      	ldr	r1, [pc, #116]	; (8000f0c <HAL_DMA_Abort_IT+0xcc>)
 8000e96:	400a      	ands	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_DMA_Abort_IT+0xd0>)
 8000e9c:	6859      	ldr	r1, [r3, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	221c      	movs	r2, #28
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_DMA_Abort_IT+0xd0>)
 8000eac:	430a      	orrs	r2, r1
 8000eae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000eb8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00c      	beq.n	8000edc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ecc:	490f      	ldr	r1, [pc, #60]	; (8000f0c <HAL_DMA_Abort_IT+0xcc>)
 8000ece:	400a      	ands	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000eda:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2225      	movs	r2, #37	; 0x25
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2224      	movs	r2, #36	; 0x24
 8000ee8:	2100      	movs	r1, #0
 8000eea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d004      	beq.n	8000efe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	0010      	movs	r0, r2
 8000efc:	4798      	blx	r3
    }
  }
  return status;
 8000efe:	230f      	movs	r3, #15
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	781b      	ldrb	r3, [r3, #0]
}
 8000f04:	0018      	movs	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b004      	add	sp, #16
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	fffffeff 	.word	0xfffffeff
 8000f10:	40020000 	.word	0x40020000

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f22:	e147      	b.n	80011b4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4091      	lsls	r1, r2
 8000f2e:	000a      	movs	r2, r1
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d100      	bne.n	8000f3c <HAL_GPIO_Init+0x28>
 8000f3a:	e138      	b.n	80011ae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2203      	movs	r2, #3
 8000f42:	4013      	ands	r3, r2
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d005      	beq.n	8000f54 <HAL_GPIO_Init+0x40>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d130      	bne.n	8000fb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	409a      	lsls	r2, r3
 8000f62:	0013      	movs	r3, r2
 8000f64:	43da      	mvns	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2203      	movs	r2, #3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	2b03      	cmp	r3, #3
 8000fc0:	d017      	beq.n	8000ff2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d123      	bne.n	8001046 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	08da      	lsrs	r2, r3, #3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3208      	adds	r2, #8
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	58d3      	ldr	r3, [r2, r3]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	2207      	movs	r2, #7
 8001010:	4013      	ands	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	2107      	movs	r1, #7
 800102a:	400b      	ands	r3, r1
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	6939      	ldr	r1, [r7, #16]
 8001044:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2203      	movs	r2, #3
 8001064:	401a      	ands	r2, r3
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	23c0      	movs	r3, #192	; 0xc0
 8001080:	029b      	lsls	r3, r3, #10
 8001082:	4013      	ands	r3, r2
 8001084:	d100      	bne.n	8001088 <HAL_GPIO_Init+0x174>
 8001086:	e092      	b.n	80011ae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001088:	4a50      	ldr	r2, [pc, #320]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3318      	adds	r3, #24
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	589b      	ldr	r3, [r3, r2]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	2203      	movs	r2, #3
 800109a:	4013      	ands	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	220f      	movs	r2, #15
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x1ca>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a45      	ldr	r2, [pc, #276]	; (80011d0 <HAL_GPIO_Init+0x2bc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x1c6>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a44      	ldr	r2, [pc, #272]	; (80011d4 <HAL_GPIO_Init+0x2c0>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x1c2>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <HAL_GPIO_Init+0x2c4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x1be>
 80010ce:	2303      	movs	r3, #3
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x1cc>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e004      	b.n	80010e0 <HAL_GPIO_Init+0x1cc>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_Init+0x1cc>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x1cc>
 80010de:	2300      	movs	r3, #0
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	2103      	movs	r1, #3
 80010e4:	400a      	ands	r2, r1
 80010e6:	00d2      	lsls	r2, r2, #3
 80010e8:	4093      	lsls	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010f0:	4936      	ldr	r1, [pc, #216]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3318      	adds	r3, #24
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	035b      	lsls	r3, r3, #13
 8001116:	4013      	ands	r3, r2
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43da      	mvns	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	039b      	lsls	r3, r3, #14
 8001140:	4013      	ands	r3, r2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 8001154:	2384      	movs	r3, #132	; 0x84
 8001156:	58d3      	ldr	r3, [r2, r3]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	029b      	lsls	r3, r3, #10
 800116c:	4013      	ands	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001178:	4914      	ldr	r1, [pc, #80]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 800117a:	2284      	movs	r2, #132	; 0x84
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	025b      	lsls	r3, r3, #9
 800119a:	4013      	ands	r3, r2
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a6:	4909      	ldr	r1, [pc, #36]	; (80011cc <HAL_GPIO_Init+0x2b8>)
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	40da      	lsrs	r2, r3
 80011bc:	1e13      	subs	r3, r2, #0
 80011be:	d000      	beq.n	80011c2 <HAL_GPIO_Init+0x2ae>
 80011c0:	e6b0      	b.n	8000f24 <HAL_GPIO_Init+0x10>
  }
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b006      	add	sp, #24
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021800 	.word	0x40021800
 80011d0:	50000400 	.word	0x50000400
 80011d4:	50000800 	.word	0x50000800
 80011d8:	50000c00 	.word	0x50000c00

080011dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	0008      	movs	r0, r1
 80011e6:	0011      	movs	r1, r2
 80011e8:	1cbb      	adds	r3, r7, #2
 80011ea:	1c02      	adds	r2, r0, #0
 80011ec:	801a      	strh	r2, [r3, #0]
 80011ee:	1c7b      	adds	r3, r7, #1
 80011f0:	1c0a      	adds	r2, r1, #0
 80011f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f4:	1c7b      	adds	r3, r7, #1
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fc:	1cbb      	adds	r3, r7, #2
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001206:	1cbb      	adds	r3, r7, #2
 8001208:	881a      	ldrh	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001226:	4013      	ands	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	429a      	cmp	r2, r3
 800123a:	d11f      	bne.n	800127c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	0013      	movs	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	189b      	adds	r3, r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4912      	ldr	r1, [pc, #72]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800124a:	0018      	movs	r0, r3
 800124c:	f7fe ff60 	bl	8000110 <__udivsi3>
 8001250:	0003      	movs	r3, r0
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001256:	e008      	b.n	800126a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3b01      	subs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e001      	b.n	800126a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e009      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	401a      	ands	r2, r3
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	429a      	cmp	r2, r3
 800127a:	d0ed      	beq.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	40007000 	.word	0x40007000
 800128c:	fffff9ff 	.word	0xfffff9ff
 8001290:	20000018 	.word	0x20000018
 8001294:	000f4240 	.word	0x000f4240

08001298 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	23e0      	movs	r3, #224	; 0xe0
 80012a2:	01db      	lsls	r3, r3, #7
 80012a4:	4013      	ands	r3, r2
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e2f3      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2201      	movs	r2, #1
 80012c8:	4013      	ands	r3, r2
 80012ca:	d100      	bne.n	80012ce <HAL_RCC_OscConfig+0x1e>
 80012cc:	e07c      	b.n	80013c8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ce:	4bc3      	ldr	r3, [pc, #780]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2238      	movs	r2, #56	; 0x38
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d8:	4bc0      	ldr	r3, [pc, #768]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2203      	movs	r2, #3
 80012de:	4013      	ands	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d102      	bne.n	80012ee <HAL_RCC_OscConfig+0x3e>
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d002      	beq.n	80012f4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d10b      	bne.n	800130c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	4bb9      	ldr	r3, [pc, #740]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	4013      	ands	r3, r2
 80012fe:	d062      	beq.n	80013c6 <HAL_RCC_OscConfig+0x116>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d15e      	bne.n	80013c6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e2ce      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	025b      	lsls	r3, r3, #9
 8001314:	429a      	cmp	r2, r3
 8001316:	d107      	bne.n	8001328 <HAL_RCC_OscConfig+0x78>
 8001318:	4bb0      	ldr	r3, [pc, #704]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4baf      	ldr	r3, [pc, #700]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 800131e:	2180      	movs	r1, #128	; 0x80
 8001320:	0249      	lsls	r1, r1, #9
 8001322:	430a      	orrs	r2, r1
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e020      	b.n	800136a <HAL_RCC_OscConfig+0xba>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	23a0      	movs	r3, #160	; 0xa0
 800132e:	02db      	lsls	r3, r3, #11
 8001330:	429a      	cmp	r2, r3
 8001332:	d10e      	bne.n	8001352 <HAL_RCC_OscConfig+0xa2>
 8001334:	4ba9      	ldr	r3, [pc, #676]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4ba8      	ldr	r3, [pc, #672]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	02c9      	lsls	r1, r1, #11
 800133e:	430a      	orrs	r2, r1
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	4ba6      	ldr	r3, [pc, #664]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4ba5      	ldr	r3, [pc, #660]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	0249      	lsls	r1, r1, #9
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e00b      	b.n	800136a <HAL_RCC_OscConfig+0xba>
 8001352:	4ba2      	ldr	r3, [pc, #648]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4ba1      	ldr	r3, [pc, #644]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001358:	49a1      	ldr	r1, [pc, #644]	; (80015e0 <HAL_RCC_OscConfig+0x330>)
 800135a:	400a      	ands	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	4b9f      	ldr	r3, [pc, #636]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b9e      	ldr	r3, [pc, #632]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001364:	499f      	ldr	r1, [pc, #636]	; (80015e4 <HAL_RCC_OscConfig+0x334>)
 8001366:	400a      	ands	r2, r1
 8001368:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d014      	beq.n	800139c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001372:	f7ff fc1b 	bl	8000bac <HAL_GetTick>
 8001376:	0003      	movs	r3, r0
 8001378:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fc16 	bl	8000bac <HAL_GetTick>
 8001380:	0002      	movs	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e28d      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800138e:	4b93      	ldr	r3, [pc, #588]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xcc>
 800139a:	e015      	b.n	80013c8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139c:	f7ff fc06 	bl	8000bac <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a6:	f7ff fc01 	bl	8000bac <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e278      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013b8:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	029b      	lsls	r3, r3, #10
 80013c0:	4013      	ands	r3, r2
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0xf6>
 80013c4:	e000      	b.n	80013c8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d100      	bne.n	80013d4 <HAL_RCC_OscConfig+0x124>
 80013d2:	e099      	b.n	8001508 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d4:	4b81      	ldr	r3, [pc, #516]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2238      	movs	r2, #56	; 0x38
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013de:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2203      	movs	r2, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2b10      	cmp	r3, #16
 80013ec:	d102      	bne.n	80013f4 <HAL_RCC_OscConfig+0x144>
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d002      	beq.n	80013fa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d135      	bne.n	8001466 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013fa:	4b78      	ldr	r3, [pc, #480]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4013      	ands	r3, r2
 8001404:	d005      	beq.n	8001412 <HAL_RCC_OscConfig+0x162>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e24b      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a74      	ldr	r2, [pc, #464]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001418:	4013      	ands	r3, r2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	021a      	lsls	r2, r3, #8
 8001422:	4b6e      	ldr	r3, [pc, #440]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d112      	bne.n	8001454 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800142e:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <HAL_RCC_OscConfig+0x33c>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	4b67      	ldr	r3, [pc, #412]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001442:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	0adb      	lsrs	r3, r3, #11
 8001448:	2207      	movs	r2, #7
 800144a:	4013      	ands	r3, r2
 800144c:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x340>)
 800144e:	40da      	lsrs	r2, r3
 8001450:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <HAL_RCC_OscConfig+0x344>)
 8001452:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001454:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x348>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff fb4b 	bl	8000af4 <HAL_InitTick>
 800145e:	1e03      	subs	r3, r0, #0
 8001460:	d051      	beq.n	8001506 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e221      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d030      	beq.n	80014d0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a5e      	ldr	r2, [pc, #376]	; (80015ec <HAL_RCC_OscConfig+0x33c>)
 8001474:	4013      	ands	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	4b57      	ldr	r3, [pc, #348]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 800147e:	430a      	orrs	r2, r1
 8001480:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b55      	ldr	r3, [pc, #340]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	0049      	lsls	r1, r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fb8c 	bl	8000bac <HAL_GetTick>
 8001494:	0003      	movs	r3, r0
 8001496:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fb87 	bl	8000bac <HAL_GetTick>
 800149e:	0002      	movs	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e1fe      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014ac:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4013      	ands	r3, r2
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b8:	4b48      	ldr	r3, [pc, #288]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a4a      	ldr	r2, [pc, #296]	; (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	021a      	lsls	r2, r3, #8
 80014c8:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	e01b      	b.n	8001508 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80014d0:	4b42      	ldr	r3, [pc, #264]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80014d6:	4949      	ldr	r1, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x34c>)
 80014d8:	400a      	ands	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb66 	bl	8000bac <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fb61 	bl	8000bac <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1d8      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f8:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	4013      	ands	r3, r2
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x236>
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001506:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2208      	movs	r2, #8
 800150e:	4013      	ands	r3, r2
 8001510:	d047      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2238      	movs	r2, #56	; 0x38
 8001518:	4013      	ands	r3, r2
 800151a:	2b18      	cmp	r3, #24
 800151c:	d10a      	bne.n	8001534 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d03c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x2f2>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d138      	bne.n	80015a2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e1ba      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d019      	beq.n	8001570 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 800153e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001540:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001542:	2101      	movs	r1, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fb30 	bl	8000bac <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fb2b 	bl	8000bac <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1a2      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d0f1      	beq.n	8001552 <HAL_RCC_OscConfig+0x2a2>
 800156e:	e018      	b.n	80015a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001572:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 8001576:	2101      	movs	r1, #1
 8001578:	438a      	bics	r2, r1
 800157a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fb16 	bl	8000bac <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fb11 	bl	8000bac <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e188      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 800159a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f1      	bne.n	8001586 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x2fe>
 80015ac:	e0c6      	b.n	800173c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ae:	231f      	movs	r3, #31
 80015b0:	18fb      	adds	r3, r7, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2238      	movs	r2, #56	; 0x38
 80015bc:	4013      	ands	r3, r2
 80015be:	2b20      	cmp	r3, #32
 80015c0:	d11e      	bne.n	8001600 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_RCC_OscConfig+0x32c>)
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	d100      	bne.n	80015ce <HAL_RCC_OscConfig+0x31e>
 80015cc:	e0b6      	b.n	800173c <HAL_RCC_OscConfig+0x48c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d000      	beq.n	80015d8 <HAL_RCC_OscConfig+0x328>
 80015d6:	e0b1      	b.n	800173c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e166      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
 80015dc:	40021000 	.word	0x40021000
 80015e0:	fffeffff 	.word	0xfffeffff
 80015e4:	fffbffff 	.word	0xfffbffff
 80015e8:	ffff80ff 	.word	0xffff80ff
 80015ec:	ffffc7ff 	.word	0xffffc7ff
 80015f0:	00f42400 	.word	0x00f42400
 80015f4:	20000018 	.word	0x20000018
 80015f8:	2000001c 	.word	0x2000001c
 80015fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001600:	4bac      	ldr	r3, [pc, #688]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	055b      	lsls	r3, r3, #21
 8001608:	4013      	ands	r3, r2
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x360>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x362>
 8001610:	2300      	movs	r3, #0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d011      	beq.n	800163a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4ba7      	ldr	r3, [pc, #668]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161a:	4ba6      	ldr	r3, [pc, #664]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0549      	lsls	r1, r1, #21
 8001620:	430a      	orrs	r2, r1
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
 8001624:	4ba3      	ldr	r3, [pc, #652]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	055b      	lsls	r3, r3, #21
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001632:	231f      	movs	r3, #31
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163a:	4b9f      	ldr	r3, [pc, #636]	; (80018b8 <HAL_RCC_OscConfig+0x608>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4013      	ands	r3, r2
 8001644:	d11a      	bne.n	800167c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <HAL_RCC_OscConfig+0x608>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b9b      	ldr	r3, [pc, #620]	; (80018b8 <HAL_RCC_OscConfig+0x608>)
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	0049      	lsls	r1, r1, #1
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001654:	f7ff faaa 	bl	8000bac <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff faa5 	bl	8000bac <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e11c      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	4b91      	ldr	r3, [pc, #580]	; (80018b8 <HAL_RCC_OscConfig+0x608>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x3e2>
 8001684:	4b8b      	ldr	r3, [pc, #556]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001688:	4b8a      	ldr	r3, [pc, #552]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001690:	e01c      	b.n	80016cc <HAL_RCC_OscConfig+0x41c>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x404>
 800169a:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800169c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800169e:	4b85      	ldr	r3, [pc, #532]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80016a0:	2104      	movs	r1, #4
 80016a2:	430a      	orrs	r2, r1
 80016a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80016a6:	4b83      	ldr	r3, [pc, #524]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80016a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016aa:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	430a      	orrs	r2, r1
 80016b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0x41c>
 80016b4:	4b7f      	ldr	r3, [pc, #508]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80016b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016b8:	4b7e      	ldr	r3, [pc, #504]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	438a      	bics	r2, r1
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c
 80016c0:	4b7c      	ldr	r3, [pc, #496]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80016c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c4:	4b7b      	ldr	r3, [pc, #492]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80016c6:	2104      	movs	r1, #4
 80016c8:	438a      	bics	r2, r1
 80016ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d014      	beq.n	80016fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa6a 	bl	8000bac <HAL_GetTick>
 80016d8:	0003      	movs	r3, r0
 80016da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016dc:	e009      	b.n	80016f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fa65 	bl	8000bac <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a74      	ldr	r2, [pc, #464]	; (80018bc <HAL_RCC_OscConfig+0x60c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0db      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f2:	4b70      	ldr	r3, [pc, #448]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	2202      	movs	r2, #2
 80016f8:	4013      	ands	r3, r2
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x42e>
 80016fc:	e013      	b.n	8001726 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fa55 	bl	8000bac <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001706:	e009      	b.n	800171c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fa50 	bl	8000bac <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	4a6a      	ldr	r2, [pc, #424]	; (80018bc <HAL_RCC_OscConfig+0x60c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0c6      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800171c:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800171e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001720:	2202      	movs	r2, #2
 8001722:	4013      	ands	r3, r2
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001726:	231f      	movs	r3, #31
 8001728:	18fb      	adds	r3, r7, r3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001732:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001734:	4b5f      	ldr	r3, [pc, #380]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001736:	4962      	ldr	r1, [pc, #392]	; (80018c0 <HAL_RCC_OscConfig+0x610>)
 8001738:	400a      	ands	r2, r1
 800173a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d100      	bne.n	8001746 <HAL_RCC_OscConfig+0x496>
 8001744:	e0b0      	b.n	80018a8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001746:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2238      	movs	r2, #56	; 0x38
 800174c:	4013      	ands	r3, r2
 800174e:	2b10      	cmp	r3, #16
 8001750:	d100      	bne.n	8001754 <HAL_RCC_OscConfig+0x4a4>
 8001752:	e078      	b.n	8001846 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d153      	bne.n	8001804 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175c:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b54      	ldr	r3, [pc, #336]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001762:	4958      	ldr	r1, [pc, #352]	; (80018c4 <HAL_RCC_OscConfig+0x614>)
 8001764:	400a      	ands	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fa20 	bl	8000bac <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fa1b 	bl	8000bac <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e092      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001784:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	049b      	lsls	r3, r3, #18
 800178c:	4013      	ands	r3, r2
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001790:	4b48      	ldr	r3, [pc, #288]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a4c      	ldr	r2, [pc, #304]	; (80018c8 <HAL_RCC_OscConfig+0x618>)
 8001796:	4013      	ands	r3, r2
 8001798:	0019      	movs	r1, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	431a      	orrs	r2, r3
 80017b8:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b3c      	ldr	r3, [pc, #240]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	0449      	lsls	r1, r1, #17
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0549      	lsls	r1, r1, #21
 80017d6:	430a      	orrs	r2, r1
 80017d8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff f9e7 	bl	8000bac <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff f9e2 	bl	8000bac <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e059      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f6:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	049b      	lsls	r3, r3, #18
 80017fe:	4013      	ands	r3, r2
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x534>
 8001802:	e051      	b.n	80018a8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800180a:	492e      	ldr	r1, [pc, #184]	; (80018c4 <HAL_RCC_OscConfig+0x614>)
 800180c:	400a      	ands	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff f9cc 	bl	8000bac <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff f9c7 	bl	8000bac <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e03e      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	049b      	lsls	r3, r3, #18
 8001834:	4013      	ands	r3, r2
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 800183e:	4923      	ldr	r1, [pc, #140]	; (80018cc <HAL_RCC_OscConfig+0x61c>)
 8001840:	400a      	ands	r2, r1
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	e030      	b.n	80018a8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e02b      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_RCC_OscConfig+0x604>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2203      	movs	r2, #3
 800185c:	401a      	ands	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	429a      	cmp	r2, r3
 8001864:	d11e      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2270      	movs	r2, #112	; 0x70
 800186a:	401a      	ands	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d117      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	23fe      	movs	r3, #254	; 0xfe
 8001878:	01db      	lsls	r3, r3, #7
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d10e      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	23f8      	movs	r3, #248	; 0xf8
 800188a:	039b      	lsls	r3, r3, #14
 800188c:	401a      	ands	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d106      	bne.n	80018a4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	0f5b      	lsrs	r3, r3, #29
 800189a:	075a      	lsls	r2, r3, #29
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b008      	add	sp, #32
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40007000 	.word	0x40007000
 80018bc:	00001388 	.word	0x00001388
 80018c0:	efffffff 	.word	0xefffffff
 80018c4:	feffffff 	.word	0xfeffffff
 80018c8:	1fc1808c 	.word	0x1fc1808c
 80018cc:	effefffc 	.word	0xeffefffc

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0e9      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2207      	movs	r2, #7
 80018ea:	4013      	ands	r3, r2
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d91e      	bls.n	8001930 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2207      	movs	r2, #7
 80018f8:	4393      	bics	r3, r2
 80018fa:	0019      	movs	r1, r3
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001904:	f7ff f952 	bl	8000bac <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800190c:	e009      	b.n	8001922 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800190e:	f7ff f94d 	bl	8000bac <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0ca      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2207      	movs	r2, #7
 8001928:	4013      	ands	r3, r2
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d1ee      	bne.n	800190e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2202      	movs	r2, #2
 8001936:	4013      	ands	r3, r2
 8001938:	d015      	beq.n	8001966 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	d006      	beq.n	8001952 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001944:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	21e0      	movs	r1, #224	; 0xe0
 800194c:	01c9      	lsls	r1, r1, #7
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4a5d      	ldr	r2, [pc, #372]	; (8001acc <HAL_RCC_ClockConfig+0x1fc>)
 8001958:	4013      	ands	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2201      	movs	r2, #1
 800196c:	4013      	ands	r3, r2
 800196e:	d057      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	029b      	lsls	r3, r3, #10
 8001980:	4013      	ands	r3, r2
 8001982:	d12b      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e097      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001990:	4b4d      	ldr	r3, [pc, #308]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	049b      	lsls	r3, r3, #18
 8001998:	4013      	ands	r3, r2
 800199a:	d11f      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e08b      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d107      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a8:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	d113      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e07f      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d106      	bne.n	80019ce <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c0:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c4:	2202      	movs	r2, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d108      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e074      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ce:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e06d      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019dc:	4b3a      	ldr	r3, [pc, #232]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2207      	movs	r2, #7
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff f8dc 	bl	8000bac <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f8:	e009      	b.n	8001a0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fa:	f7ff f8d7 	bl	8000bac <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a2f      	ldr	r2, [pc, #188]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e054      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	401a      	ands	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1ec      	bne.n	80019fa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d21e      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2207      	movs	r2, #7
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a40:	f7ff f8b4 	bl	8000bac <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7ff f8af 	bl	8000bac <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_RCC_ClockConfig+0x1f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e02c      	b.n	8001ab8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5e:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2204      	movs	r2, #4
 8001a72:	4013      	ands	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <HAL_RCC_ClockConfig+0x200>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	0019      	movs	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a8a:	f000 f829 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	0001      	movs	r1, r0
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCC_ClockConfig+0x1f8>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	220f      	movs	r2, #15
 8001a98:	401a      	ands	r2, r3
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_RCC_ClockConfig+0x204>)
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	58d3      	ldr	r3, [r2, r3]
 8001aa0:	221f      	movs	r2, #31
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	40da      	lsrs	r2, r3
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_RCC_ClockConfig+0x208>)
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_ClockConfig+0x20c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff f81f 	bl	8000af4 <HAL_InitTick>
 8001ab6:	0003      	movs	r3, r0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b004      	add	sp, #16
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	00001388 	.word	0x00001388
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	fffff0ff 	.word	0xfffff0ff
 8001ad0:	ffff8fff 	.word	0xffff8fff
 8001ad4:	080041b4 	.word	0x080041b4
 8001ad8:	20000018 	.word	0x20000018
 8001adc:	2000001c 	.word	0x2000001c

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2238      	movs	r2, #56	; 0x38
 8001aec:	4013      	ands	r3, r2
 8001aee:	d10f      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001af0:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0adb      	lsrs	r3, r3, #11
 8001af6:	2207      	movs	r2, #7
 8001af8:	4013      	ands	r3, r2
 8001afa:	2201      	movs	r2, #1
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b02:	6839      	ldr	r1, [r7, #0]
 8001b04:	4835      	ldr	r0, [pc, #212]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b06:	f7fe fb03 	bl	8000110 <__udivsi3>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e05d      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b10:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2238      	movs	r2, #56	; 0x38
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b1c:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	e054      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2238      	movs	r2, #56	; 0x38
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d138      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b2e:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2203      	movs	r2, #3
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	2207      	movs	r2, #7
 8001b40:	4013      	ands	r3, r2
 8001b42:	3301      	adds	r3, #1
 8001b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d10d      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	4824      	ldr	r0, [pc, #144]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b50:	f7fe fade 	bl	8000110 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	0019      	movs	r1, r3
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	227f      	movs	r2, #127	; 0x7f
 8001b60:	4013      	ands	r3, r2
 8001b62:	434b      	muls	r3, r1
 8001b64:	617b      	str	r3, [r7, #20]
        break;
 8001b66:	e00d      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	481c      	ldr	r0, [pc, #112]	; (8001bdc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b6c:	f7fe fad0 	bl	8000110 <__udivsi3>
 8001b70:	0003      	movs	r3, r0
 8001b72:	0019      	movs	r1, r3
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	227f      	movs	r2, #127	; 0x7f
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	434b      	muls	r3, r1
 8001b80:	617b      	str	r3, [r7, #20]
        break;
 8001b82:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0f5b      	lsrs	r3, r3, #29
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	3301      	adds	r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	6978      	ldr	r0, [r7, #20]
 8001b96:	f7fe fabb 	bl	8000110 <__udivsi3>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	e015      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2238      	movs	r2, #56	; 0x38
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b20      	cmp	r3, #32
 8001baa:	d103      	bne.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2238      	movs	r2, #56	; 0x38
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b18      	cmp	r3, #24
 8001bbe:	d103      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bc0:	23fa      	movs	r3, #250	; 0xfa
 8001bc2:	01db      	lsls	r3, r3, #7
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e001      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bcc:	693b      	ldr	r3, [r7, #16]
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	007a1200 	.word	0x007a1200

08001be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000018 	.word	0x20000018

08001bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bfc:	f7ff fff2 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c00:	0004      	movs	r4, r0
 8001c02:	f7ff fb49 	bl	8001298 <LL_RCC_GetAPB1Prescaler>
 8001c06:	0003      	movs	r3, r0
 8001c08:	0b1a      	lsrs	r2, r3, #12
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	58d3      	ldr	r3, [r2, r3]
 8001c10:	221f      	movs	r2, #31
 8001c12:	4013      	ands	r3, r2
 8001c14:	40dc      	lsrs	r4, r3
 8001c16:	0023      	movs	r3, r4
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	080041f4 	.word	0x080041f4

08001c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c2c:	2313      	movs	r3, #19
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c34:	2312      	movs	r3, #18
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	029b      	lsls	r3, r3, #10
 8001c44:	4013      	ands	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001c48:	e0a3      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4a:	2011      	movs	r0, #17
 8001c4c:	183b      	adds	r3, r7, r0
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b86      	ldr	r3, [pc, #536]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	055b      	lsls	r3, r3, #21
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d110      	bne.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c62:	4b82      	ldr	r3, [pc, #520]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c64:	2180      	movs	r1, #128	; 0x80
 8001c66:	0549      	lsls	r1, r1, #21
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c6c:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	055b      	lsls	r3, r3, #21
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	183b      	adds	r3, r7, r0
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c80:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b7a      	ldr	r3, [pc, #488]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0049      	lsls	r1, r1, #1
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c8e:	f7fe ff8d 	bl	8000bac <HAL_GetTick>
 8001c92:	0003      	movs	r3, r0
 8001c94:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c96:	e00b      	b.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7fe ff88 	bl	8000bac <HAL_GetTick>
 8001c9c:	0002      	movs	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d904      	bls.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ca6:	2313      	movs	r3, #19
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2203      	movs	r2, #3
 8001cac:	701a      	strb	r2, [r3, #0]
        break;
 8001cae:	e005      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0ed      	beq.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001cbc:	2313      	movs	r3, #19
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d154      	bne.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cc6:	4b69      	ldr	r3, [pc, #420]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cca:	23c0      	movs	r3, #192	; 0xc0
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d019      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d014      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ce2:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	4a63      	ldr	r2, [pc, #396]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cec:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf0:	4b5e      	ldr	r3, [pc, #376]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	0249      	lsls	r1, r1, #9
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cfa:	4b5c      	ldr	r3, [pc, #368]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d00:	495d      	ldr	r1, [pc, #372]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d06:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	d016      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff4a 	bl	8000bac <HAL_GetTick>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d1c:	e00c      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7fe ff45 	bl	8000bac <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a54      	ldr	r2, [pc, #336]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d904      	bls.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d2e:	2313      	movs	r3, #19
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2203      	movs	r2, #3
 8001d34:	701a      	strb	r2, [r3, #0]
            break;
 8001d36:	e004      	b.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d38:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d0ed      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d42:	2313      	movs	r3, #19
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10a      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d4c:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	4a48      	ldr	r2, [pc, #288]	; (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	4b44      	ldr	r3, [pc, #272]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d60:	e00c      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d62:	2312      	movs	r3, #18
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2213      	movs	r2, #19
 8001d68:	18ba      	adds	r2, r7, r2
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e005      	b.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d70:	2312      	movs	r3, #18
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2213      	movs	r2, #19
 8001d76:	18ba      	adds	r2, r7, r2
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d7c:	2311      	movs	r3, #17
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d8c:	493c      	ldr	r1, [pc, #240]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d009      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	2203      	movs	r2, #3
 8001da2:	4393      	bics	r3, r2
 8001da4:	0019      	movs	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dac:	430a      	orrs	r2, r1
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	4393      	bics	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	4013      	ands	r3, r2
 8001df6:	d015      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	0899      	lsrs	r1, r3, #2
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	05db      	lsls	r3, r3, #23
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d106      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	0249      	lsls	r1, r1, #9
 8001e20:	430a      	orrs	r2, r1
 8001e22:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d016      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	0249      	lsls	r1, r1, #9
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e5e:	2312      	movs	r3, #18
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	781b      	ldrb	r3, [r3, #0]
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b006      	add	sp, #24
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	fffffcff 	.word	0xfffffcff
 8001e78:	fffeffff 	.word	0xfffeffff
 8001e7c:	00001388 	.word	0x00001388
 8001e80:	efffffff 	.word	0xefffffff
 8001e84:	ffffcfff 	.word	0xffffcfff
 8001e88:	ffff3fff 	.word	0xffff3fff

08001e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e04a      	b.n	8001f34 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	223d      	movs	r2, #61	; 0x3d
 8001ea2:	5c9b      	ldrb	r3, [r3, r2]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d107      	bne.n	8001eba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	223c      	movs	r2, #60	; 0x3c
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe fce5 	bl	8000884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	223d      	movs	r2, #61	; 0x3d
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	0019      	movs	r1, r3
 8001ecc:	0010      	movs	r0, r2
 8001ece:	f000 fa6b 	bl	80023a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2248      	movs	r2, #72	; 0x48
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	223e      	movs	r2, #62	; 0x3e
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	223f      	movs	r2, #63	; 0x3f
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	5499      	strb	r1, [r3, r2]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	2101      	movs	r1, #1
 8001ef0:	5499      	strb	r1, [r3, r2]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2241      	movs	r2, #65	; 0x41
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	5499      	strb	r1, [r3, r2]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2242      	movs	r2, #66	; 0x42
 8001efe:	2101      	movs	r1, #1
 8001f00:	5499      	strb	r1, [r3, r2]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2243      	movs	r2, #67	; 0x43
 8001f06:	2101      	movs	r1, #1
 8001f08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2244      	movs	r2, #68	; 0x44
 8001f0e:	2101      	movs	r1, #1
 8001f10:	5499      	strb	r1, [r3, r2]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2245      	movs	r2, #69	; 0x45
 8001f16:	2101      	movs	r1, #1
 8001f18:	5499      	strb	r1, [r3, r2]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2246      	movs	r2, #70	; 0x46
 8001f1e:	2101      	movs	r1, #1
 8001f20:	5499      	strb	r1, [r3, r2]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2247      	movs	r2, #71	; 0x47
 8001f26:	2101      	movs	r1, #1
 8001f28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	223d      	movs	r2, #61	; 0x3d
 8001f2e:	2101      	movs	r1, #1
 8001f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	0018      	movs	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e04a      	b.n	8001fe4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	223d      	movs	r2, #61	; 0x3d
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	223c      	movs	r2, #60	; 0x3c
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 f841 	bl	8001fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	223d      	movs	r2, #61	; 0x3d
 8001f6e:	2102      	movs	r1, #2
 8001f70:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	0010      	movs	r0, r2
 8001f7e:	f000 fa13 	bl	80023a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2248      	movs	r2, #72	; 0x48
 8001f86:	2101      	movs	r1, #1
 8001f88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	223e      	movs	r2, #62	; 0x3e
 8001f8e:	2101      	movs	r1, #1
 8001f90:	5499      	strb	r1, [r3, r2]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2240      	movs	r2, #64	; 0x40
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	5499      	strb	r1, [r3, r2]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2241      	movs	r2, #65	; 0x41
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	5499      	strb	r1, [r3, r2]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2242      	movs	r2, #66	; 0x42
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2243      	movs	r2, #67	; 0x43
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2244      	movs	r2, #68	; 0x44
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2245      	movs	r2, #69	; 0x45
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2246      	movs	r2, #70	; 0x46
 8001fce:	2101      	movs	r1, #1
 8001fd0:	5499      	strb	r1, [r3, r2]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2247      	movs	r2, #71	; 0x47
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	223d      	movs	r2, #61	; 0x3d
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ff4:	46c0      	nop			; (mov r8, r8)
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	b002      	add	sp, #8
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002008:	2317      	movs	r3, #23
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	223c      	movs	r2, #60	; 0x3c
 8002014:	5c9b      	ldrb	r3, [r3, r2]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_TIM_PWM_ConfigChannel+0x22>
 800201a:	2302      	movs	r3, #2
 800201c:	e0e5      	b.n	80021ea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	223c      	movs	r2, #60	; 0x3c
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b14      	cmp	r3, #20
 800202a:	d900      	bls.n	800202e <HAL_TIM_PWM_ConfigChannel+0x32>
 800202c:	e0d1      	b.n	80021d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	009a      	lsls	r2, r3, #2
 8002032:	4b70      	ldr	r3, [pc, #448]	; (80021f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002034:	18d3      	adds	r3, r2, r3
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	0011      	movs	r1, r2
 8002042:	0018      	movs	r0, r3
 8002044:	f000 fa26 	bl	8002494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2108      	movs	r1, #8
 8002054:	430a      	orrs	r2, r1
 8002056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2104      	movs	r1, #4
 8002064:	438a      	bics	r2, r1
 8002066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6999      	ldr	r1, [r3, #24]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	619a      	str	r2, [r3, #24]
      break;
 800207a:	e0af      	b.n	80021dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	0011      	movs	r1, r2
 8002084:	0018      	movs	r0, r3
 8002086:	f000 fa8f 	bl	80025a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699a      	ldr	r2, [r3, #24]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	0109      	lsls	r1, r1, #4
 8002098:	430a      	orrs	r2, r1
 800209a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699a      	ldr	r2, [r3, #24]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4954      	ldr	r1, [pc, #336]	; (80021f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6999      	ldr	r1, [r3, #24]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	021a      	lsls	r2, r3, #8
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	619a      	str	r2, [r3, #24]
      break;
 80020c0:	e08c      	b.n	80021dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	0011      	movs	r1, r2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 faf0 	bl	80026b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2108      	movs	r1, #8
 80020dc:	430a      	orrs	r2, r1
 80020de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2104      	movs	r1, #4
 80020ec:	438a      	bics	r2, r1
 80020ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	69d9      	ldr	r1, [r3, #28]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	61da      	str	r2, [r3, #28]
      break;
 8002102:	e06b      	b.n	80021dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	0011      	movs	r1, r2
 800210c:	0018      	movs	r0, r3
 800210e:	f000 fb57 	bl	80027c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	0109      	lsls	r1, r1, #4
 8002120:	430a      	orrs	r2, r1
 8002122:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4932      	ldr	r1, [pc, #200]	; (80021f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002130:	400a      	ands	r2, r1
 8002132:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69d9      	ldr	r1, [r3, #28]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	021a      	lsls	r2, r3, #8
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	61da      	str	r2, [r3, #28]
      break;
 8002148:	e048      	b.n	80021dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	0011      	movs	r1, r2
 8002152:	0018      	movs	r0, r3
 8002154:	f000 fb9e 	bl	8002894 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2108      	movs	r1, #8
 8002164:	430a      	orrs	r2, r1
 8002166:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2104      	movs	r1, #4
 8002174:	438a      	bics	r2, r1
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800218a:	e027      	b.n	80021dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	0011      	movs	r1, r2
 8002194:	0018      	movs	r0, r3
 8002196:	f000 fbdd 	bl	8002954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	0109      	lsls	r1, r1, #4
 80021a8:	430a      	orrs	r2, r1
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4910      	ldr	r1, [pc, #64]	; (80021f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	021a      	lsls	r2, r3, #8
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80021d0:	e004      	b.n	80021dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80021d2:	2317      	movs	r3, #23
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
      break;
 80021da:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	223c      	movs	r2, #60	; 0x3c
 80021e0:	2100      	movs	r1, #0
 80021e2:	5499      	strb	r1, [r3, r2]

  return status;
 80021e4:	2317      	movs	r3, #23
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	781b      	ldrb	r3, [r3, #0]
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b006      	add	sp, #24
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	08004214 	.word	0x08004214
 80021f8:	fffffbff 	.word	0xfffffbff

080021fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002206:	230f      	movs	r3, #15
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	223c      	movs	r2, #60	; 0x3c
 8002212:	5c9b      	ldrb	r3, [r3, r2]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d101      	bne.n	800221c <HAL_TIM_ConfigClockSource+0x20>
 8002218:	2302      	movs	r3, #2
 800221a:	e0bc      	b.n	8002396 <HAL_TIM_ConfigClockSource+0x19a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	223c      	movs	r2, #60	; 0x3c
 8002220:	2101      	movs	r1, #1
 8002222:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	223d      	movs	r2, #61	; 0x3d
 8002228:	2102      	movs	r1, #2
 800222a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4a5a      	ldr	r2, [pc, #360]	; (80023a0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4a59      	ldr	r2, [pc, #356]	; (80023a4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	0192      	lsls	r2, r2, #6
 8002254:	4293      	cmp	r3, r2
 8002256:	d040      	beq.n	80022da <HAL_TIM_ConfigClockSource+0xde>
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	0192      	lsls	r2, r2, #6
 800225c:	4293      	cmp	r3, r2
 800225e:	d900      	bls.n	8002262 <HAL_TIM_ConfigClockSource+0x66>
 8002260:	e088      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0152      	lsls	r2, r2, #5
 8002266:	4293      	cmp	r3, r2
 8002268:	d100      	bne.n	800226c <HAL_TIM_ConfigClockSource+0x70>
 800226a:	e088      	b.n	800237e <HAL_TIM_ConfigClockSource+0x182>
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	0152      	lsls	r2, r2, #5
 8002270:	4293      	cmp	r3, r2
 8002272:	d900      	bls.n	8002276 <HAL_TIM_ConfigClockSource+0x7a>
 8002274:	e07e      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
 8002276:	2b70      	cmp	r3, #112	; 0x70
 8002278:	d018      	beq.n	80022ac <HAL_TIM_ConfigClockSource+0xb0>
 800227a:	d900      	bls.n	800227e <HAL_TIM_ConfigClockSource+0x82>
 800227c:	e07a      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
 800227e:	2b60      	cmp	r3, #96	; 0x60
 8002280:	d04f      	beq.n	8002322 <HAL_TIM_ConfigClockSource+0x126>
 8002282:	d900      	bls.n	8002286 <HAL_TIM_ConfigClockSource+0x8a>
 8002284:	e076      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
 8002286:	2b50      	cmp	r3, #80	; 0x50
 8002288:	d03b      	beq.n	8002302 <HAL_TIM_ConfigClockSource+0x106>
 800228a:	d900      	bls.n	800228e <HAL_TIM_ConfigClockSource+0x92>
 800228c:	e072      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	d057      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x146>
 8002292:	d900      	bls.n	8002296 <HAL_TIM_ConfigClockSource+0x9a>
 8002294:	e06e      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
 8002296:	2b30      	cmp	r3, #48	; 0x30
 8002298:	d063      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x166>
 800229a:	d86b      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
 800229c:	2b20      	cmp	r3, #32
 800229e:	d060      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x166>
 80022a0:	d868      	bhi.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d05d      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x166>
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d05b      	beq.n	8002362 <HAL_TIM_ConfigClockSource+0x166>
 80022aa:	e063      	b.n	8002374 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	6899      	ldr	r1, [r3, #8]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f000 fc2a 	bl	8002b14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2277      	movs	r2, #119	; 0x77
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	609a      	str	r2, [r3, #8]
      break;
 80022d8:	e052      	b.n	8002380 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f000 fc13 	bl	8002b14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	01c9      	lsls	r1, r1, #7
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]
      break;
 8002300:	e03e      	b.n	8002380 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	001a      	movs	r2, r3
 8002310:	f000 fb84 	bl	8002a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2150      	movs	r1, #80	; 0x50
 800231a:	0018      	movs	r0, r3
 800231c:	f000 fbde 	bl	8002adc <TIM_ITRx_SetConfig>
      break;
 8002320:	e02e      	b.n	8002380 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	001a      	movs	r2, r3
 8002330:	f000 fba2 	bl	8002a78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2160      	movs	r1, #96	; 0x60
 800233a:	0018      	movs	r0, r3
 800233c:	f000 fbce 	bl	8002adc <TIM_ITRx_SetConfig>
      break;
 8002340:	e01e      	b.n	8002380 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	001a      	movs	r2, r3
 8002350:	f000 fb64 	bl	8002a1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2140      	movs	r1, #64	; 0x40
 800235a:	0018      	movs	r0, r3
 800235c:	f000 fbbe 	bl	8002adc <TIM_ITRx_SetConfig>
      break;
 8002360:	e00e      	b.n	8002380 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0019      	movs	r1, r3
 800236c:	0010      	movs	r0, r2
 800236e:	f000 fbb5 	bl	8002adc <TIM_ITRx_SetConfig>
      break;
 8002372:	e005      	b.n	8002380 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002374:	230f      	movs	r3, #15
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
      break;
 800237c:	e000      	b.n	8002380 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800237e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	223d      	movs	r2, #61	; 0x3d
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	223c      	movs	r2, #60	; 0x3c
 800238c:	2100      	movs	r1, #0
 800238e:	5499      	strb	r1, [r3, r2]

  return status;
 8002390:	230f      	movs	r3, #15
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	781b      	ldrb	r3, [r3, #0]
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	ffceff88 	.word	0xffceff88
 80023a4:	ffff00ff 	.word	0xffff00ff

080023a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <TIM_Base_SetConfig+0xd0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d003      	beq.n	80023c8 <TIM_Base_SetConfig+0x20>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a2e      	ldr	r2, [pc, #184]	; (800247c <TIM_Base_SetConfig+0xd4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d108      	bne.n	80023da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2270      	movs	r2, #112	; 0x70
 80023cc:	4393      	bics	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <TIM_Base_SetConfig+0xd0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <TIM_Base_SetConfig+0x62>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a25      	ldr	r2, [pc, #148]	; (800247c <TIM_Base_SetConfig+0xd4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00f      	beq.n	800240a <TIM_Base_SetConfig+0x62>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a24      	ldr	r2, [pc, #144]	; (8002480 <TIM_Base_SetConfig+0xd8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00b      	beq.n	800240a <TIM_Base_SetConfig+0x62>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a23      	ldr	r2, [pc, #140]	; (8002484 <TIM_Base_SetConfig+0xdc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d007      	beq.n	800240a <TIM_Base_SetConfig+0x62>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a22      	ldr	r2, [pc, #136]	; (8002488 <TIM_Base_SetConfig+0xe0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d003      	beq.n	800240a <TIM_Base_SetConfig+0x62>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a21      	ldr	r2, [pc, #132]	; (800248c <TIM_Base_SetConfig+0xe4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d108      	bne.n	800241c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a20      	ldr	r2, [pc, #128]	; (8002490 <TIM_Base_SetConfig+0xe8>)
 800240e:	4013      	ands	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2280      	movs	r2, #128	; 0x80
 8002420:	4393      	bics	r3, r2
 8002422:	001a      	movs	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <TIM_Base_SetConfig+0xd0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00b      	beq.n	8002462 <TIM_Base_SetConfig+0xba>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <TIM_Base_SetConfig+0xdc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <TIM_Base_SetConfig+0xba>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <TIM_Base_SetConfig+0xe0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0xba>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a0b      	ldr	r2, [pc, #44]	; (800248c <TIM_Base_SetConfig+0xe4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d103      	bne.n	800246a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	615a      	str	r2, [r3, #20]
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b004      	add	sp, #16
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40012c00 	.word	0x40012c00
 800247c:	40000400 	.word	0x40000400
 8002480:	40002000 	.word	0x40002000
 8002484:	40014000 	.word	0x40014000
 8002488:	40014400 	.word	0x40014400
 800248c:	40014800 	.word	0x40014800
 8002490:	fffffcff 	.word	0xfffffcff

08002494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	2201      	movs	r2, #1
 80024a4:	4393      	bics	r3, r2
 80024a6:	001a      	movs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a32      	ldr	r2, [pc, #200]	; (800258c <TIM_OC1_SetConfig+0xf8>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2203      	movs	r2, #3
 80024ca:	4393      	bics	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2202      	movs	r2, #2
 80024dc:	4393      	bics	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a28      	ldr	r2, [pc, #160]	; (8002590 <TIM_OC1_SetConfig+0xfc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00b      	beq.n	800250a <TIM_OC1_SetConfig+0x76>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a27      	ldr	r2, [pc, #156]	; (8002594 <TIM_OC1_SetConfig+0x100>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <TIM_OC1_SetConfig+0x76>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a26      	ldr	r2, [pc, #152]	; (8002598 <TIM_OC1_SetConfig+0x104>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <TIM_OC1_SetConfig+0x76>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a25      	ldr	r2, [pc, #148]	; (800259c <TIM_OC1_SetConfig+0x108>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d10c      	bne.n	8002524 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2208      	movs	r2, #8
 800250e:	4393      	bics	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2204      	movs	r2, #4
 8002520:	4393      	bics	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <TIM_OC1_SetConfig+0xfc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d00b      	beq.n	8002544 <TIM_OC1_SetConfig+0xb0>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a19      	ldr	r2, [pc, #100]	; (8002594 <TIM_OC1_SetConfig+0x100>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d007      	beq.n	8002544 <TIM_OC1_SetConfig+0xb0>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <TIM_OC1_SetConfig+0x104>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d003      	beq.n	8002544 <TIM_OC1_SetConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a17      	ldr	r2, [pc, #92]	; (800259c <TIM_OC1_SetConfig+0x108>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d111      	bne.n	8002568 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <TIM_OC1_SetConfig+0x10c>)
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <TIM_OC1_SetConfig+0x110>)
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	621a      	str	r2, [r3, #32]
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b006      	add	sp, #24
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	fffeff8f 	.word	0xfffeff8f
 8002590:	40012c00 	.word	0x40012c00
 8002594:	40014000 	.word	0x40014000
 8002598:	40014400 	.word	0x40014400
 800259c:	40014800 	.word	0x40014800
 80025a0:	fffffeff 	.word	0xfffffeff
 80025a4:	fffffdff 	.word	0xfffffdff

080025a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	2210      	movs	r2, #16
 80025b8:	4393      	bics	r3, r2
 80025ba:	001a      	movs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a2e      	ldr	r2, [pc, #184]	; (8002690 <TIM_OC2_SetConfig+0xe8>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a2d      	ldr	r2, [pc, #180]	; (8002694 <TIM_OC2_SetConfig+0xec>)
 80025de:	4013      	ands	r3, r2
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2220      	movs	r2, #32
 80025f2:	4393      	bics	r3, r2
 80025f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a24      	ldr	r2, [pc, #144]	; (8002698 <TIM_OC2_SetConfig+0xf0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10d      	bne.n	8002626 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2280      	movs	r2, #128	; 0x80
 800260e:	4393      	bics	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2240      	movs	r2, #64	; 0x40
 8002622:	4393      	bics	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1b      	ldr	r2, [pc, #108]	; (8002698 <TIM_OC2_SetConfig+0xf0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_OC2_SetConfig+0x9e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <TIM_OC2_SetConfig+0xf4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d007      	beq.n	8002646 <TIM_OC2_SetConfig+0x9e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <TIM_OC2_SetConfig+0xf8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_OC2_SetConfig+0x9e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <TIM_OC2_SetConfig+0xfc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d113      	bne.n	800266e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4a17      	ldr	r2, [pc, #92]	; (80026a8 <TIM_OC2_SetConfig+0x100>)
 800264a:	4013      	ands	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <TIM_OC2_SetConfig+0x104>)
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4313      	orrs	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	621a      	str	r2, [r3, #32]
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b006      	add	sp, #24
 800268e:	bd80      	pop	{r7, pc}
 8002690:	feff8fff 	.word	0xfeff8fff
 8002694:	fffffcff 	.word	0xfffffcff
 8002698:	40012c00 	.word	0x40012c00
 800269c:	40014000 	.word	0x40014000
 80026a0:	40014400 	.word	0x40014400
 80026a4:	40014800 	.word	0x40014800
 80026a8:	fffffbff 	.word	0xfffffbff
 80026ac:	fffff7ff 	.word	0xfffff7ff

080026b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a35      	ldr	r2, [pc, #212]	; (8002794 <TIM_OC3_SetConfig+0xe4>)
 80026c0:	401a      	ands	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a2f      	ldr	r2, [pc, #188]	; (8002798 <TIM_OC3_SetConfig+0xe8>)
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2203      	movs	r2, #3
 80026e4:	4393      	bics	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	4a29      	ldr	r2, [pc, #164]	; (800279c <TIM_OC3_SetConfig+0xec>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <TIM_OC3_SetConfig+0xf0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10d      	bne.n	800272a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <TIM_OC3_SetConfig+0xf4>)
 8002712:	4013      	ands	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4a20      	ldr	r2, [pc, #128]	; (80027a8 <TIM_OC3_SetConfig+0xf8>)
 8002726:	4013      	ands	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <TIM_OC3_SetConfig+0xf0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00b      	beq.n	800274a <TIM_OC3_SetConfig+0x9a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <TIM_OC3_SetConfig+0xfc>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d007      	beq.n	800274a <TIM_OC3_SetConfig+0x9a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <TIM_OC3_SetConfig+0x100>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d003      	beq.n	800274a <TIM_OC3_SetConfig+0x9a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <TIM_OC3_SetConfig+0x104>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d113      	bne.n	8002772 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4a1a      	ldr	r2, [pc, #104]	; (80027b8 <TIM_OC3_SetConfig+0x108>)
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <TIM_OC3_SetConfig+0x10c>)
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	46c0      	nop			; (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b006      	add	sp, #24
 8002792:	bd80      	pop	{r7, pc}
 8002794:	fffffeff 	.word	0xfffffeff
 8002798:	fffeff8f 	.word	0xfffeff8f
 800279c:	fffffdff 	.word	0xfffffdff
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	fffff7ff 	.word	0xfffff7ff
 80027a8:	fffffbff 	.word	0xfffffbff
 80027ac:	40014000 	.word	0x40014000
 80027b0:	40014400 	.word	0x40014400
 80027b4:	40014800 	.word	0x40014800
 80027b8:	ffffefff 	.word	0xffffefff
 80027bc:	ffffdfff 	.word	0xffffdfff

080027c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a28      	ldr	r2, [pc, #160]	; (8002870 <TIM_OC4_SetConfig+0xb0>)
 80027d0:	401a      	ands	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a22      	ldr	r2, [pc, #136]	; (8002874 <TIM_OC4_SetConfig+0xb4>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	4a21      	ldr	r2, [pc, #132]	; (8002878 <TIM_OC4_SetConfig+0xb8>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4a1d      	ldr	r2, [pc, #116]	; (800287c <TIM_OC4_SetConfig+0xbc>)
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	031b      	lsls	r3, r3, #12
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a19      	ldr	r2, [pc, #100]	; (8002880 <TIM_OC4_SetConfig+0xc0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00b      	beq.n	8002838 <TIM_OC4_SetConfig+0x78>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <TIM_OC4_SetConfig+0xc4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d007      	beq.n	8002838 <TIM_OC4_SetConfig+0x78>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a17      	ldr	r2, [pc, #92]	; (8002888 <TIM_OC4_SetConfig+0xc8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_OC4_SetConfig+0x78>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a16      	ldr	r2, [pc, #88]	; (800288c <TIM_OC4_SetConfig+0xcc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4a15      	ldr	r2, [pc, #84]	; (8002890 <TIM_OC4_SetConfig+0xd0>)
 800283c:	4013      	ands	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	621a      	str	r2, [r3, #32]
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b006      	add	sp, #24
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	ffffefff 	.word	0xffffefff
 8002874:	feff8fff 	.word	0xfeff8fff
 8002878:	fffffcff 	.word	0xfffffcff
 800287c:	ffffdfff 	.word	0xffffdfff
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40014000 	.word	0x40014000
 8002888:	40014400 	.word	0x40014400
 800288c:	40014800 	.word	0x40014800
 8002890:	ffffbfff 	.word	0xffffbfff

08002894 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a25      	ldr	r2, [pc, #148]	; (8002938 <TIM_OC5_SetConfig+0xa4>)
 80028a4:	401a      	ands	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4a1f      	ldr	r2, [pc, #124]	; (800293c <TIM_OC5_SetConfig+0xa8>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <TIM_OC5_SetConfig+0xac>)
 80028d2:	4013      	ands	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a17      	ldr	r2, [pc, #92]	; (8002944 <TIM_OC5_SetConfig+0xb0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00b      	beq.n	8002902 <TIM_OC5_SetConfig+0x6e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <TIM_OC5_SetConfig+0xb4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <TIM_OC5_SetConfig+0x6e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a15      	ldr	r2, [pc, #84]	; (800294c <TIM_OC5_SetConfig+0xb8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <TIM_OC5_SetConfig+0x6e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <TIM_OC5_SetConfig+0xbc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d109      	bne.n	8002916 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <TIM_OC5_SetConfig+0xa4>)
 8002906:	4013      	ands	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	621a      	str	r2, [r3, #32]
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b006      	add	sp, #24
 8002936:	bd80      	pop	{r7, pc}
 8002938:	fffeffff 	.word	0xfffeffff
 800293c:	fffeff8f 	.word	0xfffeff8f
 8002940:	fffdffff 	.word	0xfffdffff
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40014000 	.word	0x40014000
 800294c:	40014400 	.word	0x40014400
 8002950:	40014800 	.word	0x40014800

08002954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a26      	ldr	r2, [pc, #152]	; (80029fc <TIM_OC6_SetConfig+0xa8>)
 8002964:	401a      	ands	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <TIM_OC6_SetConfig+0xac>)
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4a1c      	ldr	r2, [pc, #112]	; (8002a04 <TIM_OC6_SetConfig+0xb0>)
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	051b      	lsls	r3, r3, #20
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <TIM_OC6_SetConfig+0xb4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00b      	beq.n	80029c4 <TIM_OC6_SetConfig+0x70>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a17      	ldr	r2, [pc, #92]	; (8002a0c <TIM_OC6_SetConfig+0xb8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d007      	beq.n	80029c4 <TIM_OC6_SetConfig+0x70>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a16      	ldr	r2, [pc, #88]	; (8002a10 <TIM_OC6_SetConfig+0xbc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d003      	beq.n	80029c4 <TIM_OC6_SetConfig+0x70>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a15      	ldr	r2, [pc, #84]	; (8002a14 <TIM_OC6_SetConfig+0xc0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d109      	bne.n	80029d8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4a14      	ldr	r2, [pc, #80]	; (8002a18 <TIM_OC6_SetConfig+0xc4>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	029b      	lsls	r3, r3, #10
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b006      	add	sp, #24
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	ffefffff 	.word	0xffefffff
 8002a00:	feff8fff 	.word	0xfeff8fff
 8002a04:	ffdfffff 	.word	0xffdfffff
 8002a08:	40012c00 	.word	0x40012c00
 8002a0c:	40014000 	.word	0x40014000
 8002a10:	40014400 	.word	0x40014400
 8002a14:	40014800 	.word	0x40014800
 8002a18:	fffbffff 	.word	0xfffbffff

08002a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	2201      	movs	r2, #1
 8002a34:	4393      	bics	r3, r2
 8002a36:	001a      	movs	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	22f0      	movs	r2, #240	; 0xf0
 8002a46:	4393      	bics	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	220a      	movs	r2, #10
 8002a58:	4393      	bics	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	621a      	str	r2, [r3, #32]
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b006      	add	sp, #24
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	4393      	bics	r3, r2
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4a0d      	ldr	r2, [pc, #52]	; (8002ad8 <TIM_TI2_ConfigInputStage+0x60>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	031b      	lsls	r3, r3, #12
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	22a0      	movs	r2, #160	; 0xa0
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b006      	add	sp, #24
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	ffff0fff 	.word	0xffff0fff

08002adc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <TIM_ITRx_SetConfig+0x34>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	2207      	movs	r2, #7
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	ffcfff8f 	.word	0xffcfff8f

08002b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4a09      	ldr	r2, [pc, #36]	; (8002b50 <TIM_ETR_SetConfig+0x3c>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	021a      	lsls	r2, r3, #8
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	609a      	str	r2, [r3, #8]
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b006      	add	sp, #24
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	ffff00ff 	.word	0xffff00ff

08002b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	223c      	movs	r2, #60	; 0x3c
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e04f      	b.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	223c      	movs	r2, #60	; 0x3c
 8002b70:	2101      	movs	r1, #1
 8002b72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	223d      	movs	r2, #61	; 0x3d
 8002b78:	2102      	movs	r1, #2
 8002b7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2270      	movs	r2, #112	; 0x70
 8002bac:	4393      	bics	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d10c      	bne.n	8002bfa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	4393      	bics	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223d      	movs	r2, #61	; 0x3d
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	223c      	movs	r2, #60	; 0x3c
 8002c06:	2100      	movs	r1, #0
 8002c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b004      	add	sp, #16
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40012c00 	.word	0x40012c00
 8002c18:	ff0fffff 	.word	0xff0fffff
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40014000 	.word	0x40014000

08002c24 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	230b      	movs	r3, #11
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	1c0a      	adds	r2, r1, #0
 8002c34:	701a      	strb	r2, [r3, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_MultiProcessor_Init+0x1c>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e063      	b.n	8002d08 <HAL_MultiProcessor_Init+0xe4>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2288      	movs	r2, #136	; 0x88
 8002c44:	589b      	ldr	r3, [r3, r2]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d107      	bne.n	8002c5a <HAL_MultiProcessor_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2284      	movs	r2, #132	; 0x84
 8002c4e:	2100      	movs	r1, #0
 8002c50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fd fe6f 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2288      	movs	r2, #136	; 0x88
 8002c5e:	2124      	movs	r1, #36	; 0x24
 8002c60:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	438a      	bics	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 fd0f 	bl	8003698 <UART_SetConfig>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_MultiProcessor_Init+0x60>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e041      	b.n	8002d08 <HAL_MultiProcessor_Init+0xe4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_MultiProcessor_Init+0x70>
  {
    UART_AdvFeatureConfig(huart);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 fea6 	bl	80039e0 <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	491c      	ldr	r1, [pc, #112]	; (8002d10 <HAL_MultiProcessor_Init+0xec>)
 8002ca0:	400a      	ands	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	212a      	movs	r1, #42	; 0x2a
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_MultiProcessor_Init+0xb4>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	0a19      	lsrs	r1, r3, #8
 8002cc8:	230b      	movs	r3, #11
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	061a      	lsls	r2, r3, #24
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_MultiProcessor_Init+0xf0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 ff21 	bl	8003b48 <UART_CheckIdleState>
 8002d06:	0003      	movs	r3, r0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b004      	add	sp, #16
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	ffffb7ff 	.word	0xffffb7ff
 8002d14:	fffff7ff 	.word	0xfffff7ff

08002d18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	1dbb      	adds	r3, r7, #6
 8002d26:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2288      	movs	r2, #136	; 0x88
 8002d2c:	589b      	ldr	r3, [r3, r2]
 8002d2e:	2b20      	cmp	r3, #32
 8002d30:	d000      	beq.n	8002d34 <HAL_UART_Transmit+0x1c>
 8002d32:	e088      	b.n	8002e46 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_UART_Transmit+0x2a>
 8002d3a:	1dbb      	adds	r3, r7, #6
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e080      	b.n	8002e48 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	015b      	lsls	r3, r3, #5
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d109      	bne.n	8002d66 <HAL_UART_Transmit+0x4e>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d105      	bne.n	8002d66 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d001      	beq.n	8002d66 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e070      	b.n	8002e48 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2290      	movs	r2, #144	; 0x90
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2288      	movs	r2, #136	; 0x88
 8002d72:	2121      	movs	r1, #33	; 0x21
 8002d74:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d76:	f7fd ff19 	bl	8000bac <HAL_GetTick>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1dba      	adds	r2, r7, #6
 8002d82:	2154      	movs	r1, #84	; 0x54
 8002d84:	8812      	ldrh	r2, [r2, #0]
 8002d86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1dba      	adds	r2, r7, #6
 8002d8c:	2156      	movs	r1, #86	; 0x56
 8002d8e:	8812      	ldrh	r2, [r2, #0]
 8002d90:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	015b      	lsls	r3, r3, #5
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d108      	bne.n	8002db0 <HAL_UART_Transmit+0x98>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d104      	bne.n	8002db0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	e003      	b.n	8002db8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db8:	e02c      	b.n	8002e14 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	f000 ff0c 	bl	8003be4 <UART_WaitOnFlagUntilTimeout>
 8002dcc:	1e03      	subs	r3, r0, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e039      	b.n	8002e48 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	001a      	movs	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	05d2      	lsls	r2, r2, #23
 8002de6:	0dd2      	lsrs	r2, r2, #23
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	3302      	adds	r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e007      	b.n	8002e02 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2256      	movs	r2, #86	; 0x56
 8002e06:	5a9b      	ldrh	r3, [r3, r2]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b299      	uxth	r1, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2256      	movs	r2, #86	; 0x56
 8002e12:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2256      	movs	r2, #86	; 0x56
 8002e18:	5a9b      	ldrh	r3, [r3, r2]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1cc      	bne.n	8002dba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	0013      	movs	r3, r2
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2140      	movs	r1, #64	; 0x40
 8002e2e:	f000 fed9 	bl	8003be4 <UART_WaitOnFlagUntilTimeout>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e006      	b.n	8002e48 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2288      	movs	r2, #136	; 0x88
 8002e3e:	2120      	movs	r1, #32
 8002e40:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e000      	b.n	8002e48 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
  }
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b008      	add	sp, #32
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	228c      	movs	r2, #140	; 0x8c
 8002e64:	589b      	ldr	r3, [r3, r2]
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d000      	beq.n	8002e6c <HAL_UART_Receive+0x1c>
 8002e6a:	e0cc      	b.n	8003006 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_UART_Receive+0x2a>
 8002e72:	1dbb      	adds	r3, r7, #6
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0c4      	b.n	8003008 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	015b      	lsls	r3, r3, #5
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d109      	bne.n	8002e9e <HAL_UART_Receive+0x4e>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	d001      	beq.n	8002e9e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0b4      	b.n	8003008 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2290      	movs	r2, #144	; 0x90
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	228c      	movs	r2, #140	; 0x8c
 8002eaa:	2122      	movs	r1, #34	; 0x22
 8002eac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb4:	f7fd fe7a 	bl	8000bac <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1dba      	adds	r2, r7, #6
 8002ec0:	215c      	movs	r1, #92	; 0x5c
 8002ec2:	8812      	ldrh	r2, [r2, #0]
 8002ec4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1dba      	adds	r2, r7, #6
 8002eca:	215e      	movs	r1, #94	; 0x5e
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d10d      	bne.n	8002ef8 <HAL_UART_Receive+0xa8>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_UART_Receive+0x9e>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2260      	movs	r2, #96	; 0x60
 8002ee8:	4949      	ldr	r1, [pc, #292]	; (8003010 <HAL_UART_Receive+0x1c0>)
 8002eea:	5299      	strh	r1, [r3, r2]
 8002eec:	e02e      	b.n	8002f4c <HAL_UART_Receive+0xfc>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2260      	movs	r2, #96	; 0x60
 8002ef2:	21ff      	movs	r1, #255	; 0xff
 8002ef4:	5299      	strh	r1, [r3, r2]
 8002ef6:	e029      	b.n	8002f4c <HAL_UART_Receive+0xfc>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_UART_Receive+0xcc>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d104      	bne.n	8002f12 <HAL_UART_Receive+0xc2>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2260      	movs	r2, #96	; 0x60
 8002f0c:	21ff      	movs	r1, #255	; 0xff
 8002f0e:	5299      	strh	r1, [r3, r2]
 8002f10:	e01c      	b.n	8002f4c <HAL_UART_Receive+0xfc>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2260      	movs	r2, #96	; 0x60
 8002f16:	217f      	movs	r1, #127	; 0x7f
 8002f18:	5299      	strh	r1, [r3, r2]
 8002f1a:	e017      	b.n	8002f4c <HAL_UART_Receive+0xfc>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	055b      	lsls	r3, r3, #21
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d10d      	bne.n	8002f44 <HAL_UART_Receive+0xf4>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_UART_Receive+0xea>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2260      	movs	r2, #96	; 0x60
 8002f34:	217f      	movs	r1, #127	; 0x7f
 8002f36:	5299      	strh	r1, [r3, r2]
 8002f38:	e008      	b.n	8002f4c <HAL_UART_Receive+0xfc>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2260      	movs	r2, #96	; 0x60
 8002f3e:	213f      	movs	r1, #63	; 0x3f
 8002f40:	5299      	strh	r1, [r3, r2]
 8002f42:	e003      	b.n	8002f4c <HAL_UART_Receive+0xfc>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2260      	movs	r2, #96	; 0x60
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002f4c:	2312      	movs	r3, #18
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	2160      	movs	r1, #96	; 0x60
 8002f54:	5a52      	ldrh	r2, [r2, r1]
 8002f56:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	015b      	lsls	r3, r3, #5
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d108      	bne.n	8002f76 <HAL_UART_Receive+0x126>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d104      	bne.n	8002f76 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	e003      	b.n	8002f7e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f7e:	e036      	b.n	8002fee <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	0013      	movs	r3, r2
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	f000 fe29 	bl	8003be4 <UART_WaitOnFlagUntilTimeout>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e036      	b.n	8003008 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10e      	bne.n	8002fbe <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2212      	movs	r2, #18
 8002faa:	18ba      	adds	r2, r7, r2
 8002fac:	8812      	ldrh	r2, [r2, #0]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	3302      	adds	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e00e      	b.n	8002fdc <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2212      	movs	r2, #18
 8002fc8:	18ba      	adds	r2, r7, r2
 8002fca:	8812      	ldrh	r2, [r2, #0]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	225e      	movs	r2, #94	; 0x5e
 8002fe0:	5a9b      	ldrh	r3, [r3, r2]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b299      	uxth	r1, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	225e      	movs	r2, #94	; 0x5e
 8002fec:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	225e      	movs	r2, #94	; 0x5e
 8002ff2:	5a9b      	ldrh	r3, [r3, r2]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1c2      	bne.n	8002f80 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	228c      	movs	r2, #140	; 0x8c
 8002ffe:	2120      	movs	r1, #32
 8003000:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	0018      	movs	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	b008      	add	sp, #32
 800300e:	bd80      	pop	{r7, pc}
 8003010:	000001ff 	.word	0x000001ff

08003014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003014:	b5b0      	push	{r4, r5, r7, lr}
 8003016:	b0aa      	sub	sp, #168	; 0xa8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	22a4      	movs	r2, #164	; 0xa4
 8003024:	18b9      	adds	r1, r7, r2
 8003026:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	20a0      	movs	r0, #160	; 0xa0
 8003030:	1839      	adds	r1, r7, r0
 8003032:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	249c      	movs	r4, #156	; 0x9c
 800303c:	1939      	adds	r1, r7, r4
 800303e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003040:	0011      	movs	r1, r2
 8003042:	18bb      	adds	r3, r7, r2
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4aa2      	ldr	r2, [pc, #648]	; (80032d0 <HAL_UART_IRQHandler+0x2bc>)
 8003048:	4013      	ands	r3, r2
 800304a:	2298      	movs	r2, #152	; 0x98
 800304c:	18bd      	adds	r5, r7, r2
 800304e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003050:	18bb      	adds	r3, r7, r2
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d11a      	bne.n	800308e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003058:	187b      	adds	r3, r7, r1
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2220      	movs	r2, #32
 800305e:	4013      	ands	r3, r2
 8003060:	d015      	beq.n	800308e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003062:	183b      	adds	r3, r7, r0
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2220      	movs	r2, #32
 8003068:	4013      	ands	r3, r2
 800306a:	d105      	bne.n	8003078 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800306c:	193b      	adds	r3, r7, r4
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	055b      	lsls	r3, r3, #21
 8003074:	4013      	ands	r3, r2
 8003076:	d00a      	beq.n	800308e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307c:	2b00      	cmp	r3, #0
 800307e:	d100      	bne.n	8003082 <HAL_UART_IRQHandler+0x6e>
 8003080:	e2dc      	b.n	800363c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	0010      	movs	r0, r2
 800308a:	4798      	blx	r3
      }
      return;
 800308c:	e2d6      	b.n	800363c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800308e:	2398      	movs	r3, #152	; 0x98
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d100      	bne.n	800309a <HAL_UART_IRQHandler+0x86>
 8003098:	e122      	b.n	80032e0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800309a:	239c      	movs	r3, #156	; 0x9c
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a8c      	ldr	r2, [pc, #560]	; (80032d4 <HAL_UART_IRQHandler+0x2c0>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	d106      	bne.n	80030b4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80030a6:	23a0      	movs	r3, #160	; 0xa0
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a8a      	ldr	r2, [pc, #552]	; (80032d8 <HAL_UART_IRQHandler+0x2c4>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	d100      	bne.n	80030b4 <HAL_UART_IRQHandler+0xa0>
 80030b2:	e115      	b.n	80032e0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030b4:	23a4      	movs	r3, #164	; 0xa4
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2201      	movs	r2, #1
 80030bc:	4013      	ands	r3, r2
 80030be:	d012      	beq.n	80030e6 <HAL_UART_IRQHandler+0xd2>
 80030c0:	23a0      	movs	r3, #160	; 0xa0
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	2380      	movs	r3, #128	; 0x80
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d00b      	beq.n	80030e6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2201      	movs	r2, #1
 80030d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2290      	movs	r2, #144	; 0x90
 80030da:	589b      	ldr	r3, [r3, r2]
 80030dc:	2201      	movs	r2, #1
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2190      	movs	r1, #144	; 0x90
 80030e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030e6:	23a4      	movs	r3, #164	; 0xa4
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2202      	movs	r2, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	d011      	beq.n	8003116 <HAL_UART_IRQHandler+0x102>
 80030f2:	239c      	movs	r3, #156	; 0x9c
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	d00b      	beq.n	8003116 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2290      	movs	r2, #144	; 0x90
 800310a:	589b      	ldr	r3, [r3, r2]
 800310c:	2204      	movs	r2, #4
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2190      	movs	r1, #144	; 0x90
 8003114:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003116:	23a4      	movs	r3, #164	; 0xa4
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2204      	movs	r2, #4
 800311e:	4013      	ands	r3, r2
 8003120:	d011      	beq.n	8003146 <HAL_UART_IRQHandler+0x132>
 8003122:	239c      	movs	r3, #156	; 0x9c
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2201      	movs	r2, #1
 800312a:	4013      	ands	r3, r2
 800312c:	d00b      	beq.n	8003146 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2204      	movs	r2, #4
 8003134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2290      	movs	r2, #144	; 0x90
 800313a:	589b      	ldr	r3, [r3, r2]
 800313c:	2202      	movs	r2, #2
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2190      	movs	r1, #144	; 0x90
 8003144:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003146:	23a4      	movs	r3, #164	; 0xa4
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2208      	movs	r2, #8
 800314e:	4013      	ands	r3, r2
 8003150:	d017      	beq.n	8003182 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003152:	23a0      	movs	r3, #160	; 0xa0
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2220      	movs	r2, #32
 800315a:	4013      	ands	r3, r2
 800315c:	d105      	bne.n	800316a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800315e:	239c      	movs	r3, #156	; 0x9c
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5b      	ldr	r2, [pc, #364]	; (80032d4 <HAL_UART_IRQHandler+0x2c0>)
 8003166:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003168:	d00b      	beq.n	8003182 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2208      	movs	r2, #8
 8003170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2290      	movs	r2, #144	; 0x90
 8003176:	589b      	ldr	r3, [r3, r2]
 8003178:	2208      	movs	r2, #8
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2190      	movs	r1, #144	; 0x90
 8003180:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003182:	23a4      	movs	r3, #164	; 0xa4
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4013      	ands	r3, r2
 800318e:	d013      	beq.n	80031b8 <HAL_UART_IRQHandler+0x1a4>
 8003190:	23a0      	movs	r3, #160	; 0xa0
 8003192:	18fb      	adds	r3, r7, r3
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	04db      	lsls	r3, r3, #19
 800319a:	4013      	ands	r3, r2
 800319c:	d00c      	beq.n	80031b8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2290      	movs	r2, #144	; 0x90
 80031ac:	589b      	ldr	r3, [r3, r2]
 80031ae:	2220      	movs	r2, #32
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2190      	movs	r1, #144	; 0x90
 80031b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2290      	movs	r2, #144	; 0x90
 80031bc:	589b      	ldr	r3, [r3, r2]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d100      	bne.n	80031c4 <HAL_UART_IRQHandler+0x1b0>
 80031c2:	e23d      	b.n	8003640 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031c4:	23a4      	movs	r3, #164	; 0xa4
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2220      	movs	r2, #32
 80031cc:	4013      	ands	r3, r2
 80031ce:	d015      	beq.n	80031fc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031d0:	23a0      	movs	r3, #160	; 0xa0
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2220      	movs	r2, #32
 80031d8:	4013      	ands	r3, r2
 80031da:	d106      	bne.n	80031ea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031dc:	239c      	movs	r3, #156	; 0x9c
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	055b      	lsls	r3, r3, #21
 80031e6:	4013      	ands	r3, r2
 80031e8:	d008      	beq.n	80031fc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	0010      	movs	r0, r2
 80031fa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2290      	movs	r2, #144	; 0x90
 8003200:	589b      	ldr	r3, [r3, r2]
 8003202:	2194      	movs	r1, #148	; 0x94
 8003204:	187a      	adds	r2, r7, r1
 8003206:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	4013      	ands	r3, r2
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d004      	beq.n	8003220 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003216:	187b      	adds	r3, r7, r1
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2228      	movs	r2, #40	; 0x28
 800321c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800321e:	d04c      	beq.n	80032ba <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	0018      	movs	r0, r3
 8003224:	f000 fda6 	bl	8003d74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2240      	movs	r2, #64	; 0x40
 8003230:	4013      	ands	r3, r2
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d13c      	bne.n	80032b0 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003236:	f3ef 8310 	mrs	r3, PRIMASK
 800323a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800323c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	2090      	movs	r0, #144	; 0x90
 8003240:	183a      	adds	r2, r7, r0
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	2301      	movs	r3, #1
 8003246:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	438a      	bics	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	183b      	adds	r3, r7, r0
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003266:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003268:	f383 8810 	msr	PRIMASK, r3
}
 800326c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	589b      	ldr	r3, [r3, r2]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d016      	beq.n	80032a6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2280      	movs	r2, #128	; 0x80
 800327c:	589b      	ldr	r3, [r3, r2]
 800327e:	4a17      	ldr	r2, [pc, #92]	; (80032dc <HAL_UART_IRQHandler+0x2c8>)
 8003280:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	589b      	ldr	r3, [r3, r2]
 8003288:	0018      	movs	r0, r3
 800328a:	f7fd fdd9 	bl	8000e40 <HAL_DMA_Abort_IT>
 800328e:	1e03      	subs	r3, r0, #0
 8003290:	d01c      	beq.n	80032cc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	589b      	ldr	r3, [r3, r2]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	5852      	ldr	r2, [r2, r1]
 80032a0:	0010      	movs	r0, r2
 80032a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e012      	b.n	80032cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 f9e1 	bl	8003670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ae:	e00d      	b.n	80032cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	0018      	movs	r0, r3
 80032b4:	f000 f9dc 	bl	8003670 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e008      	b.n	80032cc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 f9d7 	bl	8003670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2290      	movs	r2, #144	; 0x90
 80032c6:	2100      	movs	r1, #0
 80032c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032ca:	e1b9      	b.n	8003640 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	46c0      	nop			; (mov r8, r8)
    return;
 80032ce:	e1b7      	b.n	8003640 <HAL_UART_IRQHandler+0x62c>
 80032d0:	0000080f 	.word	0x0000080f
 80032d4:	10000001 	.word	0x10000001
 80032d8:	04000120 	.word	0x04000120
 80032dc:	08003e41 	.word	0x08003e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d000      	beq.n	80032ea <HAL_UART_IRQHandler+0x2d6>
 80032e8:	e13e      	b.n	8003568 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032ea:	23a4      	movs	r3, #164	; 0xa4
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2210      	movs	r2, #16
 80032f2:	4013      	ands	r3, r2
 80032f4:	d100      	bne.n	80032f8 <HAL_UART_IRQHandler+0x2e4>
 80032f6:	e137      	b.n	8003568 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032f8:	23a0      	movs	r3, #160	; 0xa0
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2210      	movs	r2, #16
 8003300:	4013      	ands	r3, r2
 8003302:	d100      	bne.n	8003306 <HAL_UART_IRQHandler+0x2f2>
 8003304:	e130      	b.n	8003568 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2210      	movs	r2, #16
 800330c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2240      	movs	r2, #64	; 0x40
 8003316:	4013      	ands	r3, r2
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d000      	beq.n	800331e <HAL_UART_IRQHandler+0x30a>
 800331c:	e0a4      	b.n	8003468 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	589b      	ldr	r3, [r3, r2]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	217e      	movs	r1, #126	; 0x7e
 800332a:	187b      	adds	r3, r7, r1
 800332c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800332e:	187b      	adds	r3, r7, r1
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d100      	bne.n	8003338 <HAL_UART_IRQHandler+0x324>
 8003336:	e185      	b.n	8003644 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	225c      	movs	r2, #92	; 0x5c
 800333c:	5a9b      	ldrh	r3, [r3, r2]
 800333e:	187a      	adds	r2, r7, r1
 8003340:	8812      	ldrh	r2, [r2, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d300      	bcc.n	8003348 <HAL_UART_IRQHandler+0x334>
 8003346:	e17d      	b.n	8003644 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	187a      	adds	r2, r7, r1
 800334c:	215e      	movs	r1, #94	; 0x5e
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	589b      	ldr	r3, [r3, r2]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2220      	movs	r2, #32
 800335e:	4013      	ands	r3, r2
 8003360:	d170      	bne.n	8003444 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003362:	f3ef 8310 	mrs	r3, PRIMASK
 8003366:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800336a:	67bb      	str	r3, [r7, #120]	; 0x78
 800336c:	2301      	movs	r3, #1
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	49b4      	ldr	r1, [pc, #720]	; (8003654 <HAL_UART_IRQHandler+0x640>)
 8003384:	400a      	ands	r2, r1
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800338a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800338e:	f383 8810 	msr	PRIMASK, r3
}
 8003392:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003394:	f3ef 8310 	mrs	r3, PRIMASK
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800339a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339c:	677b      	str	r3, [r7, #116]	; 0x74
 800339e:	2301      	movs	r3, #1
 80033a0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2101      	movs	r1, #1
 80033b6:	438a      	bics	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c6:	f3ef 8310 	mrs	r3, PRIMASK
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80033cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ce:	673b      	str	r3, [r7, #112]	; 0x70
 80033d0:	2301      	movs	r3, #1
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d6:	f383 8810 	msr	PRIMASK, r3
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2140      	movs	r1, #64	; 0x40
 80033e8:	438a      	bics	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ee:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f2:	f383 8810 	msr	PRIMASK, r3
}
 80033f6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	228c      	movs	r2, #140	; 0x8c
 80033fc:	2120      	movs	r1, #32
 80033fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003406:	f3ef 8310 	mrs	r3, PRIMASK
 800340a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800340c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003410:	2301      	movs	r3, #1
 8003412:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003416:	f383 8810 	msr	PRIMASK, r3
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2110      	movs	r1, #16
 8003428:	438a      	bics	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	; 0x80
 800343c:	589b      	ldr	r3, [r3, r2]
 800343e:	0018      	movs	r0, r3
 8003440:	f7fd fc9c 	bl	8000d7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	225c      	movs	r2, #92	; 0x5c
 800344e:	5a9a      	ldrh	r2, [r3, r2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	215e      	movs	r1, #94	; 0x5e
 8003454:	5a5b      	ldrh	r3, [r3, r1]
 8003456:	b29b      	uxth	r3, r3
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f000 f90d 	bl	8003680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003466:	e0ed      	b.n	8003644 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	225c      	movs	r2, #92	; 0x5c
 800346c:	5a99      	ldrh	r1, [r3, r2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	225e      	movs	r2, #94	; 0x5e
 8003472:	5a9b      	ldrh	r3, [r3, r2]
 8003474:	b29a      	uxth	r2, r3
 8003476:	208e      	movs	r0, #142	; 0x8e
 8003478:	183b      	adds	r3, r7, r0
 800347a:	1a8a      	subs	r2, r1, r2
 800347c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	225e      	movs	r2, #94	; 0x5e
 8003482:	5a9b      	ldrh	r3, [r3, r2]
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d100      	bne.n	800348c <HAL_UART_IRQHandler+0x478>
 800348a:	e0dd      	b.n	8003648 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800348c:	183b      	adds	r3, r7, r0
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d100      	bne.n	8003496 <HAL_UART_IRQHandler+0x482>
 8003494:	e0d8      	b.n	8003648 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003496:	f3ef 8310 	mrs	r3, PRIMASK
 800349a:	60fb      	str	r3, [r7, #12]
  return(result);
 800349c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800349e:	2488      	movs	r4, #136	; 0x88
 80034a0:	193a      	adds	r2, r7, r4
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	2301      	movs	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4967      	ldr	r1, [pc, #412]	; (8003658 <HAL_UART_IRQHandler+0x644>)
 80034bc:	400a      	ands	r2, r1
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	193b      	adds	r3, r7, r4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ce:	f3ef 8310 	mrs	r3, PRIMASK
 80034d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80034d4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034d6:	2484      	movs	r4, #132	; 0x84
 80034d8:	193a      	adds	r2, r7, r4
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	2301      	movs	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	495a      	ldr	r1, [pc, #360]	; (800365c <HAL_UART_IRQHandler+0x648>)
 80034f4:	400a      	ands	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	193b      	adds	r3, r7, r4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f383 8810 	msr	PRIMASK, r3
}
 8003504:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	228c      	movs	r2, #140	; 0x8c
 800350a:	2120      	movs	r1, #32
 800350c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351a:	f3ef 8310 	mrs	r3, PRIMASK
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003522:	2480      	movs	r4, #128	; 0x80
 8003524:	193a      	adds	r2, r7, r4
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	2301      	movs	r3, #1
 800352a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2110      	movs	r1, #16
 8003540:	438a      	bics	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	193b      	adds	r3, r7, r4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	f383 8810 	msr	PRIMASK, r3
}
 8003550:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003558:	183b      	adds	r3, r7, r0
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	0011      	movs	r1, r2
 8003560:	0018      	movs	r0, r3
 8003562:	f000 f88d 	bl	8003680 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003566:	e06f      	b.n	8003648 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003568:	23a4      	movs	r3, #164	; 0xa4
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	035b      	lsls	r3, r3, #13
 8003572:	4013      	ands	r3, r2
 8003574:	d010      	beq.n	8003598 <HAL_UART_IRQHandler+0x584>
 8003576:	239c      	movs	r3, #156	; 0x9c
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	03db      	lsls	r3, r3, #15
 8003580:	4013      	ands	r3, r2
 8003582:	d009      	beq.n	8003598 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	0352      	lsls	r2, r2, #13
 800358c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	0018      	movs	r0, r3
 8003592:	f000 fc98 	bl	8003ec6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003596:	e05a      	b.n	800364e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003598:	23a4      	movs	r3, #164	; 0xa4
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	4013      	ands	r3, r2
 80035a2:	d016      	beq.n	80035d2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80035a4:	23a0      	movs	r3, #160	; 0xa0
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	4013      	ands	r3, r2
 80035ae:	d106      	bne.n	80035be <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80035b0:	239c      	movs	r3, #156	; 0x9c
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	4013      	ands	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d042      	beq.n	800364c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	0010      	movs	r0, r2
 80035ce:	4798      	blx	r3
    }
    return;
 80035d0:	e03c      	b.n	800364c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035d2:	23a4      	movs	r3, #164	; 0xa4
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2240      	movs	r2, #64	; 0x40
 80035da:	4013      	ands	r3, r2
 80035dc:	d00a      	beq.n	80035f4 <HAL_UART_IRQHandler+0x5e0>
 80035de:	23a0      	movs	r3, #160	; 0xa0
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2240      	movs	r2, #64	; 0x40
 80035e6:	4013      	ands	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 fc3e 	bl	8003e6e <UART_EndTransmit_IT>
    return;
 80035f2:	e02c      	b.n	800364e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80035f4:	23a4      	movs	r3, #164	; 0xa4
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	041b      	lsls	r3, r3, #16
 80035fe:	4013      	ands	r3, r2
 8003600:	d00b      	beq.n	800361a <HAL_UART_IRQHandler+0x606>
 8003602:	23a0      	movs	r3, #160	; 0xa0
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	05db      	lsls	r3, r3, #23
 800360c:	4013      	ands	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fc67 	bl	8003ee6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003618:	e019      	b.n	800364e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800361a:	23a4      	movs	r3, #164	; 0xa4
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	045b      	lsls	r3, r3, #17
 8003624:	4013      	ands	r3, r2
 8003626:	d012      	beq.n	800364e <HAL_UART_IRQHandler+0x63a>
 8003628:	23a0      	movs	r3, #160	; 0xa0
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	da0d      	bge.n	800364e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0018      	movs	r0, r3
 8003636:	f000 fc4e 	bl	8003ed6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800363a:	e008      	b.n	800364e <HAL_UART_IRQHandler+0x63a>
      return;
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	e006      	b.n	800364e <HAL_UART_IRQHandler+0x63a>
    return;
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	e004      	b.n	800364e <HAL_UART_IRQHandler+0x63a>
      return;
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	e002      	b.n	800364e <HAL_UART_IRQHandler+0x63a>
      return;
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	e000      	b.n	800364e <HAL_UART_IRQHandler+0x63a>
    return;
 800364c:	46c0      	nop			; (mov r8, r8)
  }
}
 800364e:	46bd      	mov	sp, r7
 8003650:	b02a      	add	sp, #168	; 0xa8
 8003652:	bdb0      	pop	{r4, r5, r7, pc}
 8003654:	fffffeff 	.word	0xfffffeff
 8003658:	fffffedf 	.word	0xfffffedf
 800365c:	effffffe 	.word	0xeffffffe

08003660 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	000a      	movs	r2, r1
 800368a:	1cbb      	adds	r3, r7, #2
 800368c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	46bd      	mov	sp, r7
 8003692:	b002      	add	sp, #8
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036a0:	231a      	movs	r3, #26
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4abc      	ldr	r2, [pc, #752]	; (80039b8 <UART_SetConfig+0x320>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4ab7      	ldr	r2, [pc, #732]	; (80039bc <UART_SetConfig+0x324>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	69fa      	ldr	r2, [r7, #28]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4aae      	ldr	r2, [pc, #696]	; (80039c0 <UART_SetConfig+0x328>)
 8003706:	4013      	ands	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	430a      	orrs	r2, r1
 8003712:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	220f      	movs	r2, #15
 800371c:	4393      	bics	r3, r2
 800371e:	0019      	movs	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4aa4      	ldr	r2, [pc, #656]	; (80039c4 <UART_SetConfig+0x32c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d127      	bne.n	8003786 <UART_SetConfig+0xee>
 8003736:	4ba4      	ldr	r3, [pc, #656]	; (80039c8 <UART_SetConfig+0x330>)
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	2203      	movs	r2, #3
 800373c:	4013      	ands	r3, r2
 800373e:	2b03      	cmp	r3, #3
 8003740:	d017      	beq.n	8003772 <UART_SetConfig+0xda>
 8003742:	d81b      	bhi.n	800377c <UART_SetConfig+0xe4>
 8003744:	2b02      	cmp	r3, #2
 8003746:	d00a      	beq.n	800375e <UART_SetConfig+0xc6>
 8003748:	d818      	bhi.n	800377c <UART_SetConfig+0xe4>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <UART_SetConfig+0xbc>
 800374e:	2b01      	cmp	r3, #1
 8003750:	d00a      	beq.n	8003768 <UART_SetConfig+0xd0>
 8003752:	e013      	b.n	800377c <UART_SetConfig+0xe4>
 8003754:	231b      	movs	r3, #27
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	e058      	b.n	8003810 <UART_SetConfig+0x178>
 800375e:	231b      	movs	r3, #27
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2202      	movs	r2, #2
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	e053      	b.n	8003810 <UART_SetConfig+0x178>
 8003768:	231b      	movs	r3, #27
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	2204      	movs	r2, #4
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	e04e      	b.n	8003810 <UART_SetConfig+0x178>
 8003772:	231b      	movs	r3, #27
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	2208      	movs	r2, #8
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e049      	b.n	8003810 <UART_SetConfig+0x178>
 800377c:	231b      	movs	r3, #27
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	2210      	movs	r2, #16
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e044      	b.n	8003810 <UART_SetConfig+0x178>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a90      	ldr	r2, [pc, #576]	; (80039cc <UART_SetConfig+0x334>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d127      	bne.n	80037e0 <UART_SetConfig+0x148>
 8003790:	4b8d      	ldr	r3, [pc, #564]	; (80039c8 <UART_SetConfig+0x330>)
 8003792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003794:	220c      	movs	r2, #12
 8003796:	4013      	ands	r3, r2
 8003798:	2b0c      	cmp	r3, #12
 800379a:	d017      	beq.n	80037cc <UART_SetConfig+0x134>
 800379c:	d81b      	bhi.n	80037d6 <UART_SetConfig+0x13e>
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d00a      	beq.n	80037b8 <UART_SetConfig+0x120>
 80037a2:	d818      	bhi.n	80037d6 <UART_SetConfig+0x13e>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <UART_SetConfig+0x116>
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d00a      	beq.n	80037c2 <UART_SetConfig+0x12a>
 80037ac:	e013      	b.n	80037d6 <UART_SetConfig+0x13e>
 80037ae:	231b      	movs	r3, #27
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e02b      	b.n	8003810 <UART_SetConfig+0x178>
 80037b8:	231b      	movs	r3, #27
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	2202      	movs	r2, #2
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e026      	b.n	8003810 <UART_SetConfig+0x178>
 80037c2:	231b      	movs	r3, #27
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2204      	movs	r2, #4
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e021      	b.n	8003810 <UART_SetConfig+0x178>
 80037cc:	231b      	movs	r3, #27
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2208      	movs	r2, #8
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e01c      	b.n	8003810 <UART_SetConfig+0x178>
 80037d6:	231b      	movs	r3, #27
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2210      	movs	r2, #16
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e017      	b.n	8003810 <UART_SetConfig+0x178>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7a      	ldr	r2, [pc, #488]	; (80039d0 <UART_SetConfig+0x338>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d104      	bne.n	80037f4 <UART_SetConfig+0x15c>
 80037ea:	231b      	movs	r3, #27
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e00d      	b.n	8003810 <UART_SetConfig+0x178>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a76      	ldr	r2, [pc, #472]	; (80039d4 <UART_SetConfig+0x33c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d104      	bne.n	8003808 <UART_SetConfig+0x170>
 80037fe:	231b      	movs	r3, #27
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e003      	b.n	8003810 <UART_SetConfig+0x178>
 8003808:	231b      	movs	r3, #27
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2210      	movs	r2, #16
 800380e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69da      	ldr	r2, [r3, #28]
 8003814:	2380      	movs	r3, #128	; 0x80
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	429a      	cmp	r2, r3
 800381a:	d000      	beq.n	800381e <UART_SetConfig+0x186>
 800381c:	e065      	b.n	80038ea <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800381e:	231b      	movs	r3, #27
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d015      	beq.n	8003854 <UART_SetConfig+0x1bc>
 8003828:	dc18      	bgt.n	800385c <UART_SetConfig+0x1c4>
 800382a:	2b04      	cmp	r3, #4
 800382c:	d00d      	beq.n	800384a <UART_SetConfig+0x1b2>
 800382e:	dc15      	bgt.n	800385c <UART_SetConfig+0x1c4>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <UART_SetConfig+0x1a2>
 8003834:	2b02      	cmp	r3, #2
 8003836:	d005      	beq.n	8003844 <UART_SetConfig+0x1ac>
 8003838:	e010      	b.n	800385c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800383a:	f7fe f9dd 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 800383e:	0003      	movs	r3, r0
 8003840:	617b      	str	r3, [r7, #20]
        break;
 8003842:	e012      	b.n	800386a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <UART_SetConfig+0x340>)
 8003846:	617b      	str	r3, [r7, #20]
        break;
 8003848:	e00f      	b.n	800386a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384a:	f7fe f949 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 800384e:	0003      	movs	r3, r0
 8003850:	617b      	str	r3, [r7, #20]
        break;
 8003852:	e00a      	b.n	800386a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	617b      	str	r3, [r7, #20]
        break;
 800385a:	e006      	b.n	800386a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003860:	231a      	movs	r3, #26
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
        break;
 8003868:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d100      	bne.n	8003872 <UART_SetConfig+0x1da>
 8003870:	e08d      	b.n	800398e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003876:	4b59      	ldr	r3, [pc, #356]	; (80039dc <UART_SetConfig+0x344>)
 8003878:	0052      	lsls	r2, r2, #1
 800387a:	5ad3      	ldrh	r3, [r2, r3]
 800387c:	0019      	movs	r1, r3
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7fc fc46 	bl	8000110 <__udivsi3>
 8003884:	0003      	movs	r3, r0
 8003886:	005a      	lsls	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	18d2      	adds	r2, r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	0019      	movs	r1, r3
 8003896:	0010      	movs	r0, r2
 8003898:	f7fc fc3a 	bl	8000110 <__udivsi3>
 800389c:	0003      	movs	r3, r0
 800389e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d91c      	bls.n	80038e0 <UART_SetConfig+0x248>
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	025b      	lsls	r3, r3, #9
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d217      	bcs.n	80038e0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	200e      	movs	r0, #14
 80038b6:	183b      	adds	r3, r7, r0
 80038b8:	210f      	movs	r1, #15
 80038ba:	438a      	bics	r2, r1
 80038bc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2207      	movs	r2, #7
 80038c6:	4013      	ands	r3, r2
 80038c8:	b299      	uxth	r1, r3
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	183a      	adds	r2, r7, r0
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	183a      	adds	r2, r7, r0
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	60da      	str	r2, [r3, #12]
 80038de:	e056      	b.n	800398e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80038e0:	231a      	movs	r3, #26
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e051      	b.n	800398e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038ea:	231b      	movs	r3, #27
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d015      	beq.n	8003920 <UART_SetConfig+0x288>
 80038f4:	dc18      	bgt.n	8003928 <UART_SetConfig+0x290>
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d00d      	beq.n	8003916 <UART_SetConfig+0x27e>
 80038fa:	dc15      	bgt.n	8003928 <UART_SetConfig+0x290>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <UART_SetConfig+0x26e>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d005      	beq.n	8003910 <UART_SetConfig+0x278>
 8003904:	e010      	b.n	8003928 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003906:	f7fe f977 	bl	8001bf8 <HAL_RCC_GetPCLK1Freq>
 800390a:	0003      	movs	r3, r0
 800390c:	617b      	str	r3, [r7, #20]
        break;
 800390e:	e012      	b.n	8003936 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003910:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <UART_SetConfig+0x340>)
 8003912:	617b      	str	r3, [r7, #20]
        break;
 8003914:	e00f      	b.n	8003936 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7fe f8e3 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 800391a:	0003      	movs	r3, r0
 800391c:	617b      	str	r3, [r7, #20]
        break;
 800391e:	e00a      	b.n	8003936 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	617b      	str	r3, [r7, #20]
        break;
 8003926:	e006      	b.n	8003936 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800392c:	231a      	movs	r3, #26
 800392e:	18fb      	adds	r3, r7, r3
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
        break;
 8003934:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d028      	beq.n	800398e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <UART_SetConfig+0x344>)
 8003942:	0052      	lsls	r2, r2, #1
 8003944:	5ad3      	ldrh	r3, [r2, r3]
 8003946:	0019      	movs	r1, r3
 8003948:	6978      	ldr	r0, [r7, #20]
 800394a:	f7fc fbe1 	bl	8000110 <__udivsi3>
 800394e:	0003      	movs	r3, r0
 8003950:	001a      	movs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	085b      	lsrs	r3, r3, #1
 8003958:	18d2      	adds	r2, r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	0019      	movs	r1, r3
 8003960:	0010      	movs	r0, r2
 8003962:	f7fc fbd5 	bl	8000110 <__udivsi3>
 8003966:	0003      	movs	r3, r0
 8003968:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b0f      	cmp	r3, #15
 800396e:	d90a      	bls.n	8003986 <UART_SetConfig+0x2ee>
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	2380      	movs	r3, #128	; 0x80
 8003974:	025b      	lsls	r3, r3, #9
 8003976:	429a      	cmp	r2, r3
 8003978:	d205      	bcs.n	8003986 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	b29a      	uxth	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	e003      	b.n	800398e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003986:	231a      	movs	r3, #26
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	226a      	movs	r2, #106	; 0x6a
 8003992:	2101      	movs	r1, #1
 8003994:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2268      	movs	r2, #104	; 0x68
 800399a:	2101      	movs	r1, #1
 800399c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80039aa:	231a      	movs	r3, #26
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	781b      	ldrb	r3, [r3, #0]
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b008      	add	sp, #32
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	cfff69f3 	.word	0xcfff69f3
 80039bc:	ffffcfff 	.word	0xffffcfff
 80039c0:	11fff4ff 	.word	0x11fff4ff
 80039c4:	40013800 	.word	0x40013800
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40004400 	.word	0x40004400
 80039d0:	40004800 	.word	0x40004800
 80039d4:	40004c00 	.word	0x40004c00
 80039d8:	00f42400 	.word	0x00f42400
 80039dc:	08004268 	.word	0x08004268

080039e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	2201      	movs	r2, #1
 80039ee:	4013      	ands	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <UART_AdvFeatureConfig+0x144>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	0019      	movs	r1, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	2202      	movs	r2, #2
 8003a10:	4013      	ands	r3, r2
 8003a12:	d00b      	beq.n	8003a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	4a43      	ldr	r2, [pc, #268]	; (8003b28 <UART_AdvFeatureConfig+0x148>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	2204      	movs	r2, #4
 8003a32:	4013      	ands	r3, r2
 8003a34:	d00b      	beq.n	8003a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	4a3b      	ldr	r2, [pc, #236]	; (8003b2c <UART_AdvFeatureConfig+0x14c>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	0019      	movs	r1, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	2208      	movs	r2, #8
 8003a54:	4013      	ands	r3, r2
 8003a56:	d00b      	beq.n	8003a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4a34      	ldr	r2, [pc, #208]	; (8003b30 <UART_AdvFeatureConfig+0x150>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	0019      	movs	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	2210      	movs	r2, #16
 8003a76:	4013      	ands	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <UART_AdvFeatureConfig+0x154>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	2220      	movs	r2, #32
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	4a25      	ldr	r2, [pc, #148]	; (8003b38 <UART_AdvFeatureConfig+0x158>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	2240      	movs	r2, #64	; 0x40
 8003aba:	4013      	ands	r3, r2
 8003abc:	d01d      	beq.n	8003afa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <UART_AdvFeatureConfig+0x15c>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	0019      	movs	r1, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	035b      	lsls	r3, r3, #13
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d10b      	bne.n	8003afa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <UART_AdvFeatureConfig+0x160>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	4013      	ands	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <UART_AdvFeatureConfig+0x164>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }
}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	fffdffff 	.word	0xfffdffff
 8003b28:	fffeffff 	.word	0xfffeffff
 8003b2c:	fffbffff 	.word	0xfffbffff
 8003b30:	ffff7fff 	.word	0xffff7fff
 8003b34:	ffffefff 	.word	0xffffefff
 8003b38:	ffffdfff 	.word	0xffffdfff
 8003b3c:	ffefffff 	.word	0xffefffff
 8003b40:	ff9fffff 	.word	0xff9fffff
 8003b44:	fff7ffff 	.word	0xfff7ffff

08003b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2290      	movs	r2, #144	; 0x90
 8003b54:	2100      	movs	r1, #0
 8003b56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b58:	f7fd f828 	bl	8000bac <HAL_GetTick>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2208      	movs	r2, #8
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d10c      	bne.n	8003b88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2280      	movs	r2, #128	; 0x80
 8003b72:	0391      	lsls	r1, r2, #14
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4a1a      	ldr	r2, [pc, #104]	; (8003be0 <UART_CheckIdleState+0x98>)
 8003b78:	9200      	str	r2, [sp, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f000 f832 	bl	8003be4 <UART_WaitOnFlagUntilTimeout>
 8003b80:	1e03      	subs	r3, r0, #0
 8003b82:	d001      	beq.n	8003b88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e026      	b.n	8003bd6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d10c      	bne.n	8003bb0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2280      	movs	r2, #128	; 0x80
 8003b9a:	03d1      	lsls	r1, r2, #15
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <UART_CheckIdleState+0x98>)
 8003ba0:	9200      	str	r2, [sp, #0]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f000 f81e 	bl	8003be4 <UART_WaitOnFlagUntilTimeout>
 8003ba8:	1e03      	subs	r3, r0, #0
 8003baa:	d001      	beq.n	8003bb0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e012      	b.n	8003bd6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2288      	movs	r2, #136	; 0x88
 8003bb4:	2120      	movs	r1, #32
 8003bb6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	228c      	movs	r2, #140	; 0x8c
 8003bbc:	2120      	movs	r1, #32
 8003bbe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2284      	movs	r2, #132	; 0x84
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	b004      	add	sp, #16
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	01ffffff 	.word	0x01ffffff

08003be4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b094      	sub	sp, #80	; 0x50
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	1dfb      	adds	r3, r7, #7
 8003bf2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf4:	e0a7      	b.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	d100      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x1a>
 8003bfc:	e0a3      	b.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfe:	f7fc ffd5 	bl	8000bac <HAL_GetTick>
 8003c02:	0002      	movs	r2, r0
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d13f      	bne.n	8003c94 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c14:	f3ef 8310 	mrs	r3, PRIMASK
 8003c18:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1e:	2301      	movs	r3, #1
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	f383 8810 	msr	PRIMASK, r3
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	494e      	ldr	r1, [pc, #312]	; (8003d70 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003c36:	400a      	ands	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	f383 8810 	msr	PRIMASK, r3
}
 8003c44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c46:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c50:	2301      	movs	r3, #1
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	f383 8810 	msr	PRIMASK, r3
}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	438a      	bics	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c72:	f383 8810 	msr	PRIMASK, r3
}
 8003c76:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2288      	movs	r2, #136	; 0x88
 8003c7c:	2120      	movs	r1, #32
 8003c7e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	228c      	movs	r2, #140	; 0x8c
 8003c84:	2120      	movs	r1, #32
 8003c86:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2284      	movs	r2, #132	; 0x84
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e069      	b.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d052      	beq.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	401a      	ands	r2, r3
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d148      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	0112      	lsls	r2, r2, #4
 8003cbc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc2:	613b      	str	r3, [r7, #16]
  return(result);
 8003cc4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc8:	2301      	movs	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f383 8810 	msr	PRIMASK, r3
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4924      	ldr	r1, [pc, #144]	; (8003d70 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f383 8810 	msr	PRIMASK, r3
}
 8003cee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cf6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f383 8810 	msr	PRIMASK, r3
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2101      	movs	r1, #1
 8003d12:	438a      	bics	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f383 8810 	msr	PRIMASK, r3
}
 8003d20:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2288      	movs	r2, #136	; 0x88
 8003d26:	2120      	movs	r1, #32
 8003d28:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	228c      	movs	r2, #140	; 0x8c
 8003d2e:	2120      	movs	r1, #32
 8003d30:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2290      	movs	r2, #144	; 0x90
 8003d36:	2120      	movs	r1, #32
 8003d38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2284      	movs	r2, #132	; 0x84
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e010      	b.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	425a      	negs	r2, r3
 8003d56:	4153      	adcs	r3, r2
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	001a      	movs	r2, r3
 8003d5c:	1dfb      	adds	r3, r7, #7
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d100      	bne.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x182>
 8003d64:	e747      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b014      	add	sp, #80	; 0x50
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	fffffe5f 	.word	0xfffffe5f

08003d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08e      	sub	sp, #56	; 0x38
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d80:	617b      	str	r3, [r7, #20]
  return(result);
 8003d82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
 8003d86:	2301      	movs	r3, #1
 8003d88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f383 8810 	msr	PRIMASK, r3
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4926      	ldr	r1, [pc, #152]	; (8003e38 <UART_EndRxTransfer+0xc4>)
 8003d9e:	400a      	ands	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f383 8810 	msr	PRIMASK, r3
}
 8003dac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dae:	f3ef 8310 	mrs	r3, PRIMASK
 8003db2:	623b      	str	r3, [r7, #32]
  return(result);
 8003db4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003db6:	633b      	str	r3, [r7, #48]	; 0x30
 8003db8:	2301      	movs	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f383 8810 	msr	PRIMASK, r3
}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	491b      	ldr	r1, [pc, #108]	; (8003e3c <UART_EndRxTransfer+0xc8>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d118      	bne.n	8003e1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003de8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df2:	2301      	movs	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f383 8810 	msr	PRIMASK, r3
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2110      	movs	r1, #16
 8003e0a:	438a      	bics	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f383 8810 	msr	PRIMASK, r3
}
 8003e18:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	228c      	movs	r2, #140	; 0x8c
 8003e1e:	2120      	movs	r1, #32
 8003e20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b00e      	add	sp, #56	; 0x38
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	fffffedf 	.word	0xfffffedf
 8003e3c:	effffffe 	.word	0xeffffffe

08003e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	225e      	movs	r2, #94	; 0x5e
 8003e52:	2100      	movs	r1, #0
 8003e54:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2256      	movs	r2, #86	; 0x56
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff fc05 	bl	8003670 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b004      	add	sp, #16
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b086      	sub	sp, #24
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e76:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	2301      	movs	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f383 8810 	msr	PRIMASK, r3
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	438a      	bics	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2288      	movs	r2, #136	; 0x88
 8003eac:	2120      	movs	r1, #32
 8003eae:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7ff fbd1 	bl	8003660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b006      	add	sp, #24
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	b002      	add	sp, #8
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b002      	add	sp, #8
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2284      	movs	r2, #132	; 0x84
 8003f04:	5c9b      	ldrb	r3, [r3, r2]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_UARTEx_DisableFifoMode+0x16>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e027      	b.n	8003f5e <HAL_UARTEx_DisableFifoMode+0x66>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2284      	movs	r2, #132	; 0x84
 8003f12:	2101      	movs	r1, #1
 8003f14:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2288      	movs	r2, #136	; 0x88
 8003f1a:	2124      	movs	r1, #36	; 0x24
 8003f1c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2101      	movs	r1, #1
 8003f32:	438a      	bics	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a0b      	ldr	r2, [pc, #44]	; (8003f68 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2288      	movs	r2, #136	; 0x88
 8003f50:	2120      	movs	r1, #32
 8003f52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2284      	movs	r2, #132	; 0x84
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b004      	add	sp, #16
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	dfffffff 	.word	0xdfffffff

08003f6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2284      	movs	r2, #132	; 0x84
 8003f7a:	5c9b      	ldrb	r3, [r3, r2]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e02e      	b.n	8003fe2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2284      	movs	r2, #132	; 0x84
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2288      	movs	r2, #136	; 0x88
 8003f90:	2124      	movs	r1, #36	; 0x24
 8003f92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	438a      	bics	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	08d9      	lsrs	r1, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f000 f854 	bl	8004070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2288      	movs	r2, #136	; 0x88
 8003fd4:	2120      	movs	r1, #32
 8003fd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2284      	movs	r2, #132	; 0x84
 8003fdc:	2100      	movs	r1, #0
 8003fde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b004      	add	sp, #16
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2284      	movs	r2, #132	; 0x84
 8003ffa:	5c9b      	ldrb	r3, [r3, r2]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004000:	2302      	movs	r3, #2
 8004002:	e02f      	b.n	8004064 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2284      	movs	r2, #132	; 0x84
 8004008:	2101      	movs	r1, #1
 800400a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2288      	movs	r2, #136	; 0x88
 8004010:	2124      	movs	r1, #36	; 0x24
 8004012:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2101      	movs	r1, #1
 8004028:	438a      	bics	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004034:	4013      	ands	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0018      	movs	r0, r3
 8004046:	f000 f813 	bl	8004070 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2288      	movs	r2, #136	; 0x88
 8004056:	2120      	movs	r1, #32
 8004058:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2284      	movs	r2, #132	; 0x84
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b004      	add	sp, #16
 800406a:	bd80      	pop	{r7, pc}
 800406c:	f1ffffff 	.word	0xf1ffffff

08004070 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800407c:	2b00      	cmp	r3, #0
 800407e:	d108      	bne.n	8004092 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	226a      	movs	r2, #106	; 0x6a
 8004084:	2101      	movs	r1, #1
 8004086:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2268      	movs	r2, #104	; 0x68
 800408c:	2101      	movs	r1, #1
 800408e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004090:	e043      	b.n	800411a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004092:	260f      	movs	r6, #15
 8004094:	19bb      	adds	r3, r7, r6
 8004096:	2208      	movs	r2, #8
 8004098:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800409a:	200e      	movs	r0, #14
 800409c:	183b      	adds	r3, r7, r0
 800409e:	2208      	movs	r2, #8
 80040a0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	0e5b      	lsrs	r3, r3, #25
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	240d      	movs	r4, #13
 80040ae:	193b      	adds	r3, r7, r4
 80040b0:	2107      	movs	r1, #7
 80040b2:	400a      	ands	r2, r1
 80040b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	0f5b      	lsrs	r3, r3, #29
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	250c      	movs	r5, #12
 80040c2:	197b      	adds	r3, r7, r5
 80040c4:	2107      	movs	r1, #7
 80040c6:	400a      	ands	r2, r1
 80040c8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040ca:	183b      	adds	r3, r7, r0
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	197a      	adds	r2, r7, r5
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	4914      	ldr	r1, [pc, #80]	; (8004124 <UARTEx_SetNbDataToProcess+0xb4>)
 80040d4:	5c8a      	ldrb	r2, [r1, r2]
 80040d6:	435a      	muls	r2, r3
 80040d8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80040da:	197b      	adds	r3, r7, r5
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	4a12      	ldr	r2, [pc, #72]	; (8004128 <UARTEx_SetNbDataToProcess+0xb8>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040e2:	0019      	movs	r1, r3
 80040e4:	f7fc f89e 	bl	8000224 <__divsi3>
 80040e8:	0003      	movs	r3, r0
 80040ea:	b299      	uxth	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	226a      	movs	r2, #106	; 0x6a
 80040f0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80040f2:	19bb      	adds	r3, r7, r6
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	193a      	adds	r2, r7, r4
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	490a      	ldr	r1, [pc, #40]	; (8004124 <UARTEx_SetNbDataToProcess+0xb4>)
 80040fc:	5c8a      	ldrb	r2, [r1, r2]
 80040fe:	435a      	muls	r2, r3
 8004100:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004102:	193b      	adds	r3, r7, r4
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	4a08      	ldr	r2, [pc, #32]	; (8004128 <UARTEx_SetNbDataToProcess+0xb8>)
 8004108:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800410a:	0019      	movs	r1, r3
 800410c:	f7fc f88a 	bl	8000224 <__divsi3>
 8004110:	0003      	movs	r3, r0
 8004112:	b299      	uxth	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2268      	movs	r2, #104	; 0x68
 8004118:	5299      	strh	r1, [r3, r2]
}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	b005      	add	sp, #20
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	08004280 	.word	0x08004280
 8004128:	08004288 	.word	0x08004288

0800412c <__libc_init_array>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	2600      	movs	r6, #0
 8004130:	4d0c      	ldr	r5, [pc, #48]	; (8004164 <__libc_init_array+0x38>)
 8004132:	4c0d      	ldr	r4, [pc, #52]	; (8004168 <__libc_init_array+0x3c>)
 8004134:	1b64      	subs	r4, r4, r5
 8004136:	10a4      	asrs	r4, r4, #2
 8004138:	42a6      	cmp	r6, r4
 800413a:	d109      	bne.n	8004150 <__libc_init_array+0x24>
 800413c:	2600      	movs	r6, #0
 800413e:	f000 f821 	bl	8004184 <_init>
 8004142:	4d0a      	ldr	r5, [pc, #40]	; (800416c <__libc_init_array+0x40>)
 8004144:	4c0a      	ldr	r4, [pc, #40]	; (8004170 <__libc_init_array+0x44>)
 8004146:	1b64      	subs	r4, r4, r5
 8004148:	10a4      	asrs	r4, r4, #2
 800414a:	42a6      	cmp	r6, r4
 800414c:	d105      	bne.n	800415a <__libc_init_array+0x2e>
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	00b3      	lsls	r3, r6, #2
 8004152:	58eb      	ldr	r3, [r5, r3]
 8004154:	4798      	blx	r3
 8004156:	3601      	adds	r6, #1
 8004158:	e7ee      	b.n	8004138 <__libc_init_array+0xc>
 800415a:	00b3      	lsls	r3, r6, #2
 800415c:	58eb      	ldr	r3, [r5, r3]
 800415e:	4798      	blx	r3
 8004160:	3601      	adds	r6, #1
 8004162:	e7f2      	b.n	800414a <__libc_init_array+0x1e>
 8004164:	08004290 	.word	0x08004290
 8004168:	08004290 	.word	0x08004290
 800416c:	08004290 	.word	0x08004290
 8004170:	08004294 	.word	0x08004294

08004174 <memset>:
 8004174:	0003      	movs	r3, r0
 8004176:	1882      	adds	r2, r0, r2
 8004178:	4293      	cmp	r3, r2
 800417a:	d100      	bne.n	800417e <memset+0xa>
 800417c:	4770      	bx	lr
 800417e:	7019      	strb	r1, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	e7f9      	b.n	8004178 <memset+0x4>

08004184 <_init>:
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418a:	bc08      	pop	{r3}
 800418c:	469e      	mov	lr, r3
 800418e:	4770      	bx	lr

08004190 <_fini>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004196:	bc08      	pop	{r3}
 8004198:	469e      	mov	lr, r3
 800419a:	4770      	bx	lr
